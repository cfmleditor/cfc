@declare function abs(required numeric number) xtype="any";
@declare function acos(required numeric number) xtype="any";
@declare function addSOAPRequestHeader(required string webservice, required string namespace, required string name, required string value, boolean mustUnderstand) xtype="any";
@declare function addSOAPResponseHeader(required string namespace, required string name, required string value, boolean mustUnderstand) xtype="any";
@declare function ajaxLink(required string url) xtype="any";
@declare function ajaxOnLoad(required string functionName) xtype="any";
@declare function applicationStartTime() xtype="any";
@declare function applicationStop() xtype="any";
@declare function array(any values) xtype="any";
@declare function arrayAppend(required array array, required any value, boolean merge) xtype="any";
@declare function arrayAvg(required array array) xtype="any";
@declare function arrayClear(required array array) xtype="any";
@declare function arrayContains(required array array, required any value, any substringMatch) xtype="any";
@declare function arrayContainsNoCase(required array array, required any value) xtype="any";
@declare function arrayDelete(required array array, required any value, string scope) xtype="any";
@declare function arrayDeleteAt(required array array, required numeric index) xtype="any";
@declare function arrayDeleteNoCase(required array array, required any value) xtype="any";
@declare function arrayEach(required array array, required any callback, boolean parallel, numeric maxThreads) xtype="any";
@declare function arrayEvery(required array array, required function closure, boolean parallel, boolean maxThreads) xtype="any";
@declare function arrayFilter(required array array, required boolean callback, boolean parallel, numeric maxThreads) xtype="any";
@declare function arrayFind(required array array, required any value) xtype="any";
@declare function arrayFindAll(required array array, any valueorcallback) xtype="any";
@declare function arrayFindAllNoCase(required array array, required variableName valueorcallback) xtype="any";
@declare function arrayFindNoCase(required array array, required any valueorcallback) xtype="any";
@declare function arrayFirst(required array array) xtype="any";
@declare function arrayGetMetadata(required array array) xtype="any";
@declare function arrayIndexExists(required array array, required numeric index) xtype="any";
@declare function arrayInsertAt(required array array, required numeric position, required any value) xtype="any";
@declare function arrayIsDefined(required string array, required numeric index) xtype="any";
@declare function arrayIsEmpty(required array array) xtype="any";
@declare function arrayLast(required array array) xtype="any";
@declare function arrayLen(required array array) xtype="any";
@declare function arrayMap(required array array, required any callback, boolean parallel, numeric maxThreads) xtype="any";
@declare function arrayMax(required array array) xtype="any";
@declare function arrayMedian(required array array) xtype="any";
@declare function arrayMerge(required array array1, required array array2, boolean leaveIndex) xtype="any";
@declare function arrayMid(required array array, required numeric start, numeric count) xtype="any";
@declare function arrayMin(required array array) xtype="any";
@declare function arrayNew(required numeric dimension, boolean isSynchronized) xtype="any";
@declare function arrayPrepend(required array array, required any value) xtype="any";
@declare function arrayReduce(required array array, required any callback, any initialValue) xtype="any";
@declare function arrayResize(required array array, required numeric size) xtype="any";
@declare function arrayReverse(required array array) xtype="any";
@declare function arraySet(required array array, required numeric start, required numeric end, required any value) xtype="any";
@declare function arraySetMetadata(required array array, required struct metadata) xtype="any";
@declare function arrayShift(required array array) xtype="any";
@declare function arraySlice(required array array, required numeric offset, numeric length) xtype="any";
@declare function arraySome(required array array, required boolean callback, boolean parallel, numeric maxThreads) xtype="any";
@declare function arraySort(required array array, required string sortType, string sortOrder, any callback) xtype="any";
@declare function arraySplice(required array array, required numeric index, numeric elementCountForRemoval, array replacements) xtype="any";
@declare function arraySum(required array array, boolean ignoreEmpty) xtype="any";
@declare function arraySwap(required array array, required numeric position1, required numeric position2) xtype="any";
@declare function arrayToList(required array array, string delimiter) xtype="any";
@declare function arrayToStruct(required array array) xtype="any";
@declare function asc(required string string) xtype="any";
@declare function asin(required numeric number) xtype="any";
@declare function atn(required numeric number) xtype="any";
@declare function beat(any time) xtype="any";
@declare function binaryDecode(required string string, required string encoding) xtype="any";
@declare function binaryEncode(required any binaryData, required string encoding) xtype="any";
@declare function bitAnd(required numeric number1, required numeric number2) xtype="any";
@declare function bitMaskClear(required numeric number, required numeric start, required numeric length) xtype="any";
@declare function bitMaskRead(required numeric number, required numeric start, required numeric length) xtype="any";
@declare function bitMaskSet(required numeric number, required numeric mask, required numeric start, required numeric length) xtype="any";
@declare function bitNot(required numeric number) xtype="any";
@declare function bitOr(required numeric number1, required numeric number2) xtype="any";
@declare function bitShln(required numeric number, required numeric count) xtype="any";
@declare function bitShrn(required numeric number, required numeric count) xtype="any";
@declare function bitXor(required numeric number1, required numeric number2) xtype="any";
@declare function booleanFormat(required numeric value) xtype="any";
@declare function bundleInfo(required any obj) xtype="any";
@declare function cacheClear(any filterOrTags, string cacheName) xtype="any";
@declare function cacheCount(string cacheName) xtype="any";
@declare function cacheDelete(required string id, boolean throwOnError, string cacheName) xtype="any";
@declare function cacheGet(required string id, string region, string cacheName, boolean throwWhenNotExist) xtype="any";
@declare function cacheGetAll(string filter, string cacheName) xtype="any";
@declare function cacheGetAllIds() xtype="any";
@declare function cacheGetDefaultCacheName(required string type) xtype="any";
@declare function cacheGetEngineProperties() xtype="any";
@declare function cacheGetMetadata(required string id, string objectType, string region) xtype="any";
@declare function cacheGetProperties(string region) xtype="any";
@declare function cacheGetSession(required string objectType, boolean isKey) xtype="any";
@declare function cacheIdExists(required string id, string region) xtype="any";
@declare function cacheKeyExists(required string key, string cacheName) xtype="any";
@declare function cachePut(required string id, required string value, date timespan, date idleTime, string region, boolean throwOnError) xtype="any";
@declare function cacheRegionExists(required string region, string password) xtype="any";
@declare function cacheRegionNew(required string region, struct properties, boolean throwOnError, string password) xtype="any";
@declare function cacheRegionRemove(required string region, string password) xtype="any";
@declare function cacheRemove(required any id, boolean throwOnError, string region, boolean exact) xtype="any";
@declare function cacheRemoveAll(string region) xtype="any";
@declare function cacheSetProperties(required struct properties, string region) xtype="any";
@declare function callStackDump(string output) xtype="any";
@declare function callStackGet() xtype="any";
@declare function canonicalize(required string input, required boolean restrictMultiple, required boolean restrictMixed, boolean throwOnError) xtype="any";
@declare function ceiling(required numeric number) xtype="any";
@declare function cfusion_Decrypt(required string string, required string key) xtype="any";
@declare function cfusion_Encrypt(required string string, required string key) xtype="any";
@declare function charsetDecode(required string string, required string encoding) xtype="any";
@declare function charsetEncode(required any binaryData, required string encoding) xtype="any";
@declare function chr(required numeric number) xtype="any";
@declare function cJustify(required string string, required numeric length) xtype="any";
@declare function collectionEach(required any collection, required function closure) xtype="any";
@declare function collectionEvery(required any collection, required function closure, boolean parallel, numeric maxThreads) xtype="any";
@declare function collectionFilter(required any collection, required function filter, boolean parallel, numeric maxThreads) xtype="any";
@declare function collectionMap(required any collection, required function closure, boolean parallel, numeric maxThreads) xtype="any";
@declare function collectionReduce(required any collection, required function closure, any initalValue) xtype="any";
@declare function collectionSome(required any collection, required function closure, boolean parallel, numeric maxThreads) xtype="any";
@declare function compare(required string string1, required string string2) xtype="any";
@declare function compareNoCase(required string string1, required string string2) xtype="any";
@declare function componentCacheClear() xtype="any";
@declare function componentCacheList() xtype="any";
@declare function componentInfo(required component component) xtype="any";
@declare function compress(required string format, required string source, required string target, boolean includeBaseFolder, string mode) xtype="any";
@declare function contractPath(required string path_absolute, boolean placeholder) xtype="any";
@declare function cos(required numeric number) xtype="any";
@declare function createDate(required numeric year, required numeric month, required numeric day) xtype="any";
@declare function createDateTime(required numeric year, required numeric month, required numeric day, required numeric hour, required numeric minute, required numeric second, numeric millisecond, numeric timezone) xtype="any";
@declare function createDynamicProxy(required any cfc, required array interfaces) xtype="any";
@declare function createGUID() xtype="any";
@declare function createObject(required string type, required string className, string context, string locale, string servername, string component_name, string urltowsdl, string portname, string bundleName, string bundleVersion) xtype="any";
@declare function createODBCDate(required date date) xtype="any";
@declare function createODBCDateTime(required date date) xtype="any";
@declare function createODBCTime(required date date) xtype="any";
@declare function createTime(required numeric hour, required numeric minute, required numeric second, numeric millisecond, numeric timezone) xtype="any";
@declare function createTimespan(required numeric days, required numeric hours, required numeric minutes, required numeric seconds) xtype="any";
@declare function createUniqueID() xtype="any";
@declare function createUUID() xtype="any";
@declare function csrfGenerateToken(string key, boolean forceNew) xtype="any";
@declare function csrfVerifyToken(required string token, string key) xtype="any";
@declare function ctCacheClear() xtype="any";
@declare function ctCacheList() xtype="any";
@declare function datasourceFlushMetacache(string datasourceName) xtype="any";
@declare function dateAdd(required string datepart, required numeric number, required date date) xtype="any";
@declare function dateCompare(required date date1, required date date2, string datePart) xtype="any";
@declare function dateConvert(required string conversionType, required date date) xtype="any";
@declare function dateDiff(required string datepart, required date date1, required date date2) xtype="any";
@declare function dateFormat(required date date, string mask) xtype="any";
@declare function datePart(required string datepart, required date date, timezone timezone) xtype="any";
@declare function dateTimeFormat(required date date, string mask, string timezone) xtype="any";
@declare function day(required date date) xtype="any";
@declare function dayOfWeek(required date date, string calendar) xtype="any";
@declare function dayOfWeekAsString(required numeric dayOfWeek, locale locale) xtype="any";
@declare function dayOfWeekShortAsString(required numeric day_of_week, string locale) xtype="any";
@declare function dayOfYear(required date date) xtype="any";
@declare function daysInMonth(required date date) xtype="any";
@declare function daysInYear(required date date) xtype="any";
@declare function de(required string String) xtype="any";
@declare function decimalFormat(required numeric number) xtype="any";
@declare function decodeForHTML(required any string) xtype="any";
@declare function decodeFromURL(required any string) xtype="any";
@declare function decrementValue(required numeric number) xtype="any";
@declare function decrypt(required string string, required string key, string algorithm, string encoding, any iv, any salt, numeric iterations) xtype="any";
@declare function decryptBinary(required string binaryData, required string key, string algorithm, string encoding, any iv, any salt, numeric iterations) xtype="any";
@declare function deleteClientVariable(required string name) xtype="any";
@declare function deserialize(required string string, required string type, required boolean useCustomSerializer) xtype="any";
@declare function deserializeJSON(required string json, boolean strictMapping, boolean useCustomSerializer) xtype="any";
@declare function deserializeXML(required String string, required boolean useCustomSerializer) xtype="any";
@declare function directoryCopy(required string source, required string destination, boolean recurse, any filter, boolean createPath) xtype="any";
@declare function directoryCreate(required string path, boolean createPath, boolean ignoreExists) xtype="any";
@declare function directoryDelete(required string path, boolean recurse) xtype="any";
@declare function directoryExists(required string path, boolean allowRealPath) xtype="any";
@declare function directoryList(required string path, boolean recurse, string listInfo, string filter, string sort, string type) xtype="any";
@declare function directoryRename(required string oldPath, required string newPath, boolean createPath) xtype="any";
@declare function dollarFormat(required numeric number) xtype="any";
@declare function dotnetToCFType(required any variableName) xtype="any";
@declare function duplicate(required any object, boolean deepcopy) xtype="any";
@declare function each(required any collection, required function closure, boolean parallel, numeric maxThreads) xtype="any";
@declare function echo(required string string) xtype="any";
@declare function empty(required any variable) xtype="any";
@declare function encodeFor(required string type, required string value) xtype="any";
@declare function encodeForCSS(required string string, boolean canonicalize) xtype="any";
@declare function encodeForDN(required string string, boolean canonicalize) xtype="any";
@declare function encodeForHTML(required string string, boolean canonicalize) xtype="any";
@declare function encodeForHTMLAttribute(required string string, boolean canonicalize) xtype="any";
@declare function encodeForJavaScript(required string string, boolean canonicalize, boolean canonicalize) xtype="any";
@declare function encodeForLDAP(required string string, boolean canonicalize) xtype="any";
@declare function encodeForURL(required string string, boolean canonicalize) xtype="any";
@declare function encodeForXML(required string string, boolean canonicalize) xtype="any";
@declare function encodeForXMLAttribute(required string string, boolean canonicalize) xtype="any";
@declare function encodeForXPath(required string string, boolean canonicalize) xtype="any";
@declare function encrypt(required string string, required string key, string algorithm, string encoding, any iv, any salt, numeric iterations) xtype="any";
@declare function encryptBinary(required any binaryData, required string key, string algorithm, any iv, any salt, numeric iterations) xtype="any";
@declare function entityDelete(required variableName entity) xtype="any";
@declare function entityLoad(required string entityName, any id, any Filter, boolean unique, string Order, struct options) xtype="any";
@declare function entityLoadByExample(required string sampleEntity, boolean unique, any matchCriteria) xtype="any";
@declare function entityLoadByPK(required string entity, required string id, boolean unique) xtype="any";
@declare function entityMerge(required variableName entity) xtype="any";
@declare function entityNameArray() xtype="any";
@declare function entityNameList(string delimiter) xtype="any";
@declare function entityNew(required string entityName, struct properties, boolean ignoreExtras) xtype="any";
@declare function entityReload(required variableName entity) xtype="any";
@declare function entitySave(required variableName entity, boolean forceInsert) xtype="any";
@declare function entityToQuery(required variableName entity, string name) xtype="any";
@declare function esapiDecode(required string decodeFrom, required string string) xtype="any";
@declare function esapiEncode(required string encodeFor, required string string) xtype="any";
@declare function evaluate(required string expression) xtype="any";
@declare function exp(required numeric number) xtype="any";
@declare function expandPath(required string path) xtype="any";
@declare function extract(required string format, required string source, required string target) xtype="any";
@declare function fileAppend(required string file, required string data, string charset, boolean addNewLine) xtype="any";
@declare function fileClose(required any file) xtype="any";
@declare function fileCopy(required string source, required string destination) xtype="any";
@declare function fileDelete(required string filePath) xtype="any";
@declare function fileExists(required string filePath) xtype="any";
@declare function fileGetMimeType(required any file, boolean strict) xtype="any";
@declare function fileIsEOF(required any file) xtype="any";
@declare function fileMove(required string source, required string destination) xtype="any";
@declare function fileOpen(required string filePath, string mode, string charset, boolean seekable) xtype="any";
@declare function fileRead(required any filePath, any charset, any bufferSize) xtype="any";
@declare function fileReadBinary(required string filePath) xtype="any";
@declare function fileReadLine(required any file) xtype="any";
@declare function fileSeek(required any file, required numeric position) xtype="any";
@declare function fileSetAccessMode(required string filePath, required string mode) xtype="any";
@declare function fileSetAttribute(required string filePath, required string attribute) xtype="any";
@declare function fileSetLastModified(required string filePath, required date date) xtype="any";
@declare function fileSkipBytes(required any file, required numeric skipCount) xtype="any";
@declare function fileUpload(required string destination, string fileField, string mimeType, string onConflict, boolean strict) xtype="any";
@declare function fileUploadAll(required string destination, string mimeType, string onConflict, boolean strict, boolean continueOnError, variableName errorVariable, string allowedExtensions) xtype="any";
@declare function fileWrite(required any filePath, required any data, string charset) xtype="any";
@declare function fileWriteLine(required any file, required string data) xtype="any";
@declare function find(required string substring, required string string, numeric start) xtype="any";
@declare function findNoCase(required string substring, required string string, numeric start) xtype="any";
@declare function findOneOf(required string set, required string string, numeric start) xtype="any";
@declare function firstDayOfMonth(required date date) xtype="any";
@declare function fix(required numeric number) xtype="any";
@declare function floor(required numeric number) xtype="any";
@declare function formatBaseN(required numeric number, required numeric radix) xtype="any";
@declare function generatePBKDFKey(required string algorithm, required string passphrase, required string salt, required numeric iterations, required numeric keySize) xtype="any";
@declare function generateSecretKey(string algorithm, numeric keysize) xtype="any";
@declare function getApplicationMetadata() xtype="any";
@declare function getApplicationSettings(required boolean suppressFunction) xtype="any";
@declare function getAuthUser() xtype="any";
@declare function getBaseTagData(required string tagname, numeric level) xtype="any";
@declare function getBaseTagList(any caller) xtype="any";
@declare function getBaseTemplatePath() xtype="any";
@declare function getBuiltinFunction(required string name) xtype="any";
@declare function getCanonicalPath(required string path) xtype="any";
@declare function getClassPath() xtype="any";
@declare function getClientVariablesList() xtype="any";
@declare function getComponentMetadata(required string path) xtype="any";
@declare function getContextRoot() xtype="any";
@declare function getCpuUsage(numeric interval) xtype="any";
@declare function getCurrentContext() xtype="any";
@declare function getCurrentTemplatePath() xtype="any";
@declare function getDirectoryFromPath(required string path) xtype="any";
@declare function getEncoding(required string scope_name) xtype="any";
@declare function getException(required any javaobject) xtype="any";
@declare function getFileFromPath(required string path) xtype="any";
@declare function getFileInfo(required string path) xtype="any";
@declare function getFreeSpace(required any path) xtype="any";
@declare function getFunctionCalledName() xtype="any";
@declare function getFunctionData(required string functionName, string dialect) xtype="any";
@declare function getFunctionKeywords() xtype="any";
@declare function getFunctionList() xtype="any";
@declare function getGatewayHelper(required string gatewayID) xtype="any";
@declare function getHTTPRequestData(required boolean includeBody) xtype="any";
@declare function getHTTPTimeString(date DateTime) xtype="any";
@declare function getK2ServerDocCount() xtype="any";
@declare function getK2ServerDocCountLimit() xtype="any";
@declare function getLocale() xtype="any";
@declare function getLocaleCountry() xtype="any";
@declare function getLocaleDisplayName() xtype="any";
@declare function getLocaleInfo(string locale, string dspLocale) xtype="any";
@declare function getLocaleLanguage() xtype="any";
@declare function getLocalhostIP() xtype="any";
@declare function getLuceeID() xtype="any";
@declare function getMemoryUsage(string type) xtype="any";
@declare function getMetadata(required any Object) xtype="any";
@declare function getMetricData(required string mode) xtype="any";
@declare function getNumericDate(required any arg1) xtype="any";
@declare function getPageContext() xtype="any";
@declare function getPrinterInfo(string printer) xtype="any";
@declare function getPrinterList(string delimiter) xtype="any";
@declare function getProfileSections(required string inifile) xtype="any";
@declare function getProfileString(required string inipath, required string section, required string entry) xtype="any";
@declare function getReadableImageFormats() xtype="any";
@declare function getSafeHTML(required string inputString, required string PolicyFile, required boolean throwOnError) xtype="any";
@declare function getSOAPRequest(any webservice) xtype="any";
@declare function getSOAPRequestHeader(required string namespace, required string name, boolean asXML) xtype="any";
@declare function getSOAPResponse(required any webservice) xtype="any";
@declare function getSOAPResponseHeader(required any webservice, required string namespace, required string name, boolean asXML) xtype="any";
@declare function getSystemFreeMemory() xtype="any";
@declare function getSystemTotalMemory(any region) xtype="any";
@declare function getTagData(required string nameSpaceWithSeperator, required string tagName, string dialect) xtype="any";
@declare function getTagList() xtype="any";
@declare function getTempDirectory() xtype="any";
@declare function getTempFile(required string dir, required string prefix) xtype="any";
@declare function getTemplatePath() xtype="any";
@declare function getTickCount() xtype="any";
@declare function getTimezone() xtype="any";
@declare function getTimezoneInfo(required string timezone, required string locale) xtype="any";
@declare function getToken(required string String, required numeric index, string delimiters) xtype="any";
@declare function getTotalSpace(required any path) xtype="any";
@declare function getUserRoles() xtype="any";
@declare function getVariable(required string name) xtype="any";
@declare function getVFSMetadata(required string fileSystemType) xtype="any";
@declare function getWriteableImageFormats() xtype="any";
@declare function hash(required string string, string algorithm, string encoding, numeric additionalIterations) xtype="any";
@declare function hash40(required any input, string algorithm, string encoding, numeric numIterations) xtype="any";
@declare function hmac(required any message, required any key, string algorithm, string encoding) xtype="any";
@declare function hour(required date date) xtype="any";
@declare function htmlCodeFormat(required string string, numeric version) xtype="any";
@declare function htmlEditFormat(required string string, numeric version) xtype="any";
@declare function htmlParse(required string html, boolean caseSensitive) xtype="any";
@declare function iIf(required boolean condition, required string expression1, required string expression2) xtype="any";
@declare function imageAddBorder(required string name, required string thickness, string color, string bordertype) xtype="any";
@declare function imageBlur(required string name, numeric blurradius) xtype="any";
@declare function imageClearRect(required string name, required numeric x, required numeric y, required numeric width, required numeric height) xtype="any";
@declare function imageCopy(required string name, required numeric x, required numeric y, required numeric width, required numeric height, numeric dx, numeric dy) xtype="any";
@declare function imageCreateCaptcha(required any height, required any width, required any text, any difficulty, any font, any fontsize) xtype="any";
@declare function imageCrop(required string name, required numeric x, required numeric y, required numeric width, required numeric height) xtype="any";
@declare function imageDrawArc(required string name, required numeric x, required numeric y, required numeric width, required numeric height, required numeric startAngle, required numeric archAngle, boolean filled) xtype="any";
@declare function imageDrawBeveledRect(required string name, required numeric x, required numeric y, required numeric width, required numeric height, required boolean raised, boolean filled) xtype="any";
@declare function imageDrawCubicCurve(required any name, required string ctrlx1, required numeric ctrly1, required numeric ctrlx2, required numeric ctrly2, required numeric x1, required numeric y1, required numeric x2, required numeric y2) xtype="any";
@declare function imageDrawImage(required any name, required any image, required numeric x, required numeric y) xtype="any";
@declare function imageDrawLine(required string name, required numeric x1, required numeric y1, required numeric x2, required numeric y2) xtype="any";
@declare function imageDrawLines(required string name, required numeric xcords, required numeric ycords, boolean isPolygon, boolean filled) xtype="any";
@declare function imageDrawOval(required string name, required numeric x, required numeric y, required numeric width, required numeric height, boolean filled) xtype="any";
@declare function imageDrawPoint(required string name, required numeric x, required numeric y) xtype="any";
@declare function imageDrawQuadraticCurve(required any name, required numeric x1, required numeric y1, required string ctrlx1, required numeric ctrly1, required numeric x2, required numeric y2) xtype="any";
@declare function imageDrawRect(required string name, required numeric x, required numeric y, required numeric width, required numeric height, boolean filled) xtype="any";
@declare function imageDrawRoundRect(required string name, required numeric x, required numeric y, required numeric width, required numeric height, required numeric arcwidth, required numeric archeight, boolean filled) xtype="any";
@declare function imageDrawText(required string name, required string str, required numeric x, required numeric y, struct attributecollection) xtype="any";
@declare function imageFilter(required any name, required string filtername, struct parameters) xtype="any";
@declare function imageFilterColorMap(required string type, string lineColor1, string lineColor2) xtype="any";
@declare function imageFilterCurves() xtype="any";
@declare function imageFilterKernel(required numeric width, required numeric height, required any data) xtype="any";
@declare function imageFilterWarpGrid(required numeric rows, required numeric cols, required numeric width, required numeric height) xtype="any";
@declare function imageFlip(required string name, required string transpose) xtype="any";
@declare function imageFonts() xtype="any";
@declare function imageFormats() xtype="any";
@declare function imageGetBlob(required string source) xtype="any";
@declare function imageGetBufferedImage(required string name) xtype="any";
@declare function imageGetExifMetaData(required string name) xtype="any";
@declare function imageGetEXIFTag(required string name, required string tagName) xtype="any";
@declare function imageGetHeight(required string name) xtype="any";
@declare function imageGetIPTCMetaData(required string name) xtype="any";
@declare function imageGetIPTCtag(required string name, required string tagName) xtype="any";
@declare function imageGetMetadata(required string name) xtype="any";
@declare function imageGetWidth(required string name) xtype="any";
@declare function imageGrayScale(required string name) xtype="any";
@declare function imageInfo(required string name) xtype="any";
@declare function imageMakeColorTransparent(required any img, required any color) xtype="any";
@declare function imageMakeTranslucent(required any img, required any percentage) xtype="any";
@declare function imageNegative(required string name) xtype="any";
@declare function imageNew(string source, numeric width, numeric height, string imagetype, string canvascolor) xtype="any";
@declare function imageOverlay(required string source1, required string source2, string rule, string alpha) xtype="any";
@declare function imagePaste(required string image1, required string image2, required numeric x, required numeric y) xtype="any";
@declare function imageRead(required string path) xtype="any";
@declare function imageReadBase64(required string string) xtype="any";
@declare function imageResize(required string name, required numeric width, required numeric height, string interpolation, boolean blurfactor) xtype="any";
@declare function imageRotate(required string name, required numeric angle, numeric x, numeric y, string interpolation) xtype="any";
@declare function imageRotateDrawingAxis(required string name, required numeric angle, numeric x, numeric y) xtype="any";
@declare function imageScaleTofit(required string name, required numeric fitWidth, required numeric fitHeight, string interpolation, boolean blurfactor) xtype="any";
@declare function imageSetAntialiasing(required string name, boolean antialias) xtype="any";
@declare function imageSetBackgroundColor(required any name, required any color) xtype="any";
@declare function imageSetDrawingAlpha(required any name, required numeric alpha) xtype="any";
@declare function imageSetDrawingColor(required string name, required any color) xtype="any";
@declare function imageSetDrawingStroke(required string name, struct attributecollection) xtype="any";
@declare function imageSetDrawingTransparency(required String name, required numeric percent) xtype="any";
@declare function imageSharpen(required string name, numeric gain) xtype="any";
@declare function imageShear(required string name, required numeric shear, string direction, string interpolation) xtype="any";
@declare function imageShearDrawingAxis(required string name, required numeric shrx, required numeric shry) xtype="any";
@declare function imageTranslate(required string name, required numeric xTrans, required numeric yTrans, string interpolation) xtype="any";
@declare function imageTranslateDrawingAxis(required any name, required numeric x, required numeric y) xtype="any";
@declare function imageWrite(required string name, string destination, string quality, boolean overwrite) xtype="any";
@declare function imageWriteBase64(required string name, required string destination, required string format, boolean inHTMLFormat, boolean overwrite) xtype="any";
@declare function imageXORDrawingMode(required string name, required string c1) xtype="any";
@declare function incrementValue(required numeric number) xtype="any";
@declare function inputBaseN(required string String, required string radix) xtype="any";
@declare function insert(required string substring, required string String, required numeric position) xtype="any";
@declare function int(required numeric number) xtype="any";
@declare function invalidateOauthAccesstoken(required any token, required any type) xtype="any";
@declare function invoke(required string instance, required string methodname, any arguments) xtype="any";
@declare function isArray(required any value, numeric number) xtype="any";
@declare function isBinary(required any value) xtype="any";
@declare function isBoolean(required any value) xtype="any";
@declare function isClosure(required any object) xtype="any";
@declare function isCustomFunction(required any Object) xtype="any";
@declare function isDate(required any Object) xtype="any";
@declare function isDDX(required string path) xtype="any";
@declare function isDebugMode() xtype="any";
@declare function isDefined(required string variable_name) xtype="any";
@declare function isEmpty(required any value) xtype="any";
@declare function isFileObject(required any object) xtype="any";
@declare function isImage(required string name) xtype="any";
@declare function isImageFile(required string path) xtype="any";
@declare function isInstanceOf(required any object, required string typename) xtype="any";
@declare function isIPInRange(required any ips, required string ip) xtype="any";
@declare function isIPV6(required string IP) xtype="any";
@declare function isJSON(required string var) xtype="any";
@declare function isK2ServerABroker() xtype="any";
@declare function isK2ServerDocCountExceeded() xtype="any";
@declare function isK2ServerOnline() xtype="any";
@declare function isLeapYear(required numeric year) xtype="any";
@declare function isLocalhost(required string ipaddress) xtype="any";
@declare function isNotMap(required any obj) xtype="any";
@declare function isNull(required variableName object) xtype="any";
@declare function isNumeric(required string String) xtype="any";
@declare function isNumericDate(required numeric number) xtype="any";
@declare function isObject(required any value) xtype="any";
@declare function isPDFArchive(required string path, required string standard) xtype="any";
@declare function isPDFFile(required string path) xtype="any";
@declare function isPDFObject(required variableName value) xtype="any";
@declare function isQuery(required string value) xtype="any";
@declare function isSafeHTML(required string inputString, string PolicyFile) xtype="any";
@declare function isSimpleValue(required any value) xtype="any";
@declare function isSOAPRequest() xtype="any";
@declare function isSpreadsheetFile(required string file) xtype="any";
@declare function isSpreadsheetObject(required variableName object) xtype="any";
@declare function isStruct(required any variable) xtype="any";
@declare function isUserInAnyRole(required string roleList) xtype="any";
@declare function isUserInRole(required string role_name) xtype="any";
@declare function isUserLoggedIn() xtype="any";
@declare function isValid(required string type, required any value, numeric min, numeric max, string pattern) xtype="any";
@declare function isValidOauthAccesstoken(required any token, required any type) xtype="any";
@declare function isVideoFile(required string path) xtype="any";
@declare function isWDDX(required any value) xtype="any";
@declare function isXML(required string value) xtype="any";
@declare function isXMLAttribute(required any value) xtype="any";
@declare function isXMLDoc(required any value) xtype="any";
@declare function isXMLElem(required any value) xtype="any";
@declare function isXMLNode(required any value) xtype="any";
@declare function isXMLRoot(required any value) xtype="any";
@declare function isZipFile(required string path) xtype="any";
@declare function javacast(required string type, required string variable) xtype="any";
@declare function jsStringFormat(required string String) xtype="any";
@declare function lCase(required string String) xtype="any";
@declare function left(required string String, required numeric count) xtype="any";
@declare function len(required any Object) xtype="any";
@declare function listAppend(required string list, required string value, string delimiters, boolean includeEmptyFields) xtype="any";
@declare function listAvg(required string list, string delimiters, boolean multiCharacterDelimiter) xtype="any";
@declare function listChangeDelims(required string list, required string new_delimiter, string delimiters, string includeEmptyValues) xtype="any";
@declare function listCompact(required string list, string delimiters, boolean multiCharacterDelimiter) xtype="any";
@declare function listContains(required string list, required string substring, string delimiters) xtype="any";
@declare function listContainsNoCase(required string list, required string substring, string delimiters) xtype="any";
@declare function listDeleteAt(required string list, required numeric position, string delimiters) xtype="any";
@declare function listEach(required any str, required any function, required any delim, any includeEmptyFields) xtype="any";
@declare function listEvery(required string list, required function closure, string delimiter, boolean includeEmptyFields, boolean multiCharacterDelimiter, boolean parallel, numeric maxThreads) xtype="any";
@declare function listFilter(required List list, required function function) xtype="any";
@declare function listFind(required string list, required string value, string delimiters, string includeEmptyValues) xtype="any";
@declare function listFindNoCase(required string list, required string value, string delimiters, string includeEmptyValues) xtype="any";
@declare function listFirst(required string list, string delimiters) xtype="any";
@declare function listGetAt(required string list, required numeric position, string delimiters, boolean includeEmptyValues) xtype="any";
@declare function listIndexExists(required string list, required numeric index, string delimiter, boolean includeEmptyFields) xtype="any";
@declare function listInsertAt(required string list, required numeric position, required string value, string delimiters) xtype="any";
@declare function listItemTrim(required string list, string delimiters, boolean includeEmptyFields) xtype="any";
@declare function listLast(required string list, string delimiters, boolean includeEmptyValues) xtype="any";
@declare function listLen(required string list, string delimiters, string includeEmptyValues) xtype="any";
@declare function listMap(required string list, required any function, any intialValue, string delimiter, boolean includeEmptyFields) xtype="any";
@declare function listPrepend(required string list, required string value, string delimiters, boolean includeEmptyFields) xtype="any";
@declare function listQualify(required string list, required string qualifier, string delimiters, string elements, boolean includeEmptyFields) xtype="any";
@declare function listReduce(required string list, required any function, required any intialValue, required string delimiter, required boolean includeEmptyFields) xtype="any";
@declare function listRemoveDuplicates(required string list, string delimiter, boolean ignoreCase) xtype="any";
@declare function listRest(required string list, string delimiters) xtype="any";
@declare function listSetAt(required string list, required numeric position, required string value, string delimiters) xtype="any";
@declare function listSome(required string list, required function closure, string delimiter, boolean includeEmptyFields, boolean multiCharacterDelimiter, boolean parallel, numeric maxThreads) xtype="any";
@declare function listSort(required string list, required string sort_type, string sort_order, string delimiters) xtype="any";
@declare function listToArray(required string list, string delimiters, boolean includeEmptyFields, boolean multiCharacterDelimiter) xtype="any";
@declare function listTrim(required string list, string delimiters) xtype="any";
@declare function listValueCount(required string list, required string value, string delimiters) xtype="any";
@declare function listValueCountNoCase(required string list, required string value, string delimiters) xtype="any";
@declare function lJustify(required string String, required numeric length) xtype="any";
@declare function location(required string url, boolean addtoken, numeric statuscode) xtype="any";
@declare function log(required numeric number) xtype="any";
@declare function log10(required numeric number) xtype="any";
@declare function lsCurrencyFormat(required numeric number, string type) xtype="any";
@declare function lsDateFormat(required date date, string mask, string locale) xtype="any";
@declare function lsDateTimeFormat(required any date, any mask, any locale, any timeZone) xtype="any";
@declare function lsDayOfWeek(required date date, string locale, string timezone) xtype="any";
@declare function lsEuroCurrencyFormat(required string currency, required string type) xtype="any";
@declare function lsIsCurrency(required string String) xtype="any";
@declare function lsIsDate(required string String) xtype="any";
@declare function lsIsNumeric(required string String) xtype="any";
@declare function lsNumberFormat(required numeric number, string mask) xtype="any";
@declare function lsParseCurrency(required string String) xtype="any";
@declare function lsParseDateTime(required string dt_string) xtype="any";
@declare function lsParseEuroCurrency(required string currency_string) xtype="any";
@declare function lsParseNumber(required string String, string locale) xtype="any";
@declare function lsTimeFormat(required date time, string mask) xtype="any";
@declare function lsWeek(required date date, string locale, string timezone) xtype="any";
@declare function lTrim(required string String) xtype="any";
@declare function manifestRead(required string path) xtype="any";
@declare function max(required numeric number1, required numeric number2) xtype="any";
@declare function metaphone(required string str) xtype="any";
@declare function mid(required string String, required numeric start, required numeric count) xtype="any";
@declare function millisecond(required date date, string timezone) xtype="any";
@declare function min(required numeric number1, required numeric number2) xtype="any";
@declare function minute(required date date) xtype="any";
@declare function month(required date date) xtype="any";
@declare function monthAsString(required numeric month_number) xtype="any";
@declare function monthShortAsString(required numeric monthnumber) xtype="any";
@declare function newLine() xtype="any";
@declare function now() xtype="any";
@declare function nowServer() xtype="any";
@declare function nullValue() xtype="any";
@declare function numberFormat(required numeric number, string mask) xtype="any";
@declare function objectEquals(required any Param1, required any Param2) xtype="any";
@declare function objectLoad(any binaryObject, string filepath) xtype="any";
@declare function objectSave(required variableName object, string file) xtype="any";
@declare function onApplicationEnd(required struct ApplicationScope) xtype="any";
@declare function onApplicationStart() xtype="any";
@declare function onError(required struct exception, required string eventName) xtype="any";
@declare function onMissingMethod(required string missingMethodName, required struct missingMethodArguments) xtype="any";
@declare function onMissingTemplate(required string targetPage) xtype="any";
@declare function onRequest(required string targetPage) xtype="any";
@declare function onRequestEnd(required string targetPage) xtype="any";
@declare function onRequestStart(required string targetPage) xtype="any";
@declare function onServerStart() xtype="any";
@declare function onSessionEnd(required struct sessionScope, required struct applicationScope) xtype="any";
@declare function onSessionStart() xtype="any";
@declare function ormClearSession(string datasource) xtype="any";
@declare function ormCloseAllSessions(required any region) xtype="any";
@declare function ormCloseSession(string datasource) xtype="any";
@declare function ormEvictCollection(required string componentName, required string relationName, string id) xtype="any";
@declare function ormEvictEntity(required string componentName, string id) xtype="any";
@declare function ormEvictQueries(string cacheName) xtype="any";
@declare function ormExecuteQuery(required string hql, any params, boolean unique, string queryoptions) xtype="any";
@declare function ormFlush(string datasource) xtype="any";
@declare function ormFlushAll() xtype="any";
@declare function ormGetSession() xtype="any";
@declare function ormGetSessionFactory() xtype="any";
@declare function ormIndex() xtype="any";
@declare function ormIndexPurge(required any region) xtype="any";
@declare function ormReload() xtype="any";
@declare function ormSearch(required any query_text, required any entityName, required any fields, required any optionMap) xtype="any";
@declare function ormSearchOffline(required any query_text, required any entityName, required any fields_to_be_selected, required any fields, any optionMap, any extraoptions) xtype="any";
@declare function pagePoolClear() xtype="any";
@declare function pagePoolList() xtype="any";
@declare function paragraphFormat(required string String) xtype="any";
@declare function parameterExists(required any parameter) xtype="any";
@declare function parseDateTime(required string dt_string, string pop_conversion) xtype="any";
@declare function parseNumber(required string number, string radix) xtype="any";
@declare function pi() xtype="any";
@declare function precisionEvaluate(required string expressions) xtype="any";
@declare function preserveSingleQuotes(required string variable) xtype="any";
@declare function quarter(required date date) xtype="any";
@declare function query() xtype="any";
@declare function queryAddColumn(required query query, required string column_name, string datatype, required array array_name) xtype="any";
@declare function queryAddRow(required query query, Numeric / Array / Struct number/row(s)) xtype="any";
@declare function queryAppend(required query query1, required query query2) xtype="any";
@declare function queryClear(required query query) xtype="any";
@declare function queryColumnArray(required query query) xtype="any";
@declare function queryColumnCount(required query query) xtype="any";
@declare function queryColumnData(required query query, required string columnName, function closure) xtype="any";
@declare function queryColumnExists(required query query, required string column) xtype="any";
@declare function queryColumnList(required query query, string delimiter) xtype="any";
@declare function queryConvertForGrid(required string query, required numeric page, required numeric pageSize) xtype="any";
@declare function queryCurrentRow(required query query) xtype="any";
@declare function queryDeleteColumn(required query query, required string column) xtype="any";
@declare function queryDeleteRow(required query query, numeric row) xtype="any";
@declare function queryEach(required query query, required any callback, boolean parallel, numeric maxThreads) xtype="any";
@declare function queryEvery(required query query, required function closure, boolean parallel, numeric maxThreads) xtype="any";
@declare function queryExecute(required string sql, any params, struct options) xtype="any";
@declare function queryFilter(required query query, required boolean callback, boolean parallel, numeric maxThreads) xtype="any";
@declare function queryGetCell(required query query, required string column_name, numeric row_number) xtype="any";
@declare function queryGetResult(required query query) xtype="any";
@declare function queryGetRow(required any query, required any rowNumber) xtype="any";
@declare function queryKeyExists(required query query, required string key) xtype="any";
@declare function queryMap(required query query, required boolean callback, boolean parallel, numeric maxThreads) xtype="any";
@declare function queryNew(required string columnList, string columnTypeList, any rowData) xtype="any";
@declare function queryPrepend(required query query1, required query query2) xtype="any";
@declare function queryRecordCount(required query query) xtype="any";
@declare function queryReduce(required query query, required any callback, any initialValue) xtype="any";
@declare function queryReverse(required query query) xtype="any";
@declare function queryRowData(required query query, required numeric rowNumber) xtype="any";
@declare function querySetCell(required query query, required string column, required any value, numeric row) xtype="any";
@declare function querySlice(required query query, required numeric offset, numeric length) xtype="any";
@declare function querySome(required query query, required boolean callback, boolean parallel, numeric maxThreads) xtype="any";
@declare function querySort(required query query, required function sortFunction, string direction) xtype="any";
@declare function quotedValueList(required QueryColumn column, string delimiter) xtype="any";
@declare function rand(string algorithm) xtype="any";
@declare function randomize(required numeric number, string algorithm) xtype="any";
@declare function randRange(required numeric number1, required numeric number2, string algorithm) xtype="any";
@declare function reEscape(required any string) xtype="any";
@declare function reFind(required Regex reg_expression, required string string, numeric start, boolean returnsubexpressions, string scope) xtype="any";
@declare function reFindNoCase(required Regex reg_expression, required string string, numeric start, boolean returnsubexpressions, string scope) xtype="any";
@declare function releaseCOMObject(required any objectName) xtype="any";
@declare function reMatch(required string reg_expression, required string string) xtype="any";
@declare function reMatchNoCase(required string reg_expression, required string string) xtype="any";
@declare function removeCachedQuery(required any SQL, required any datasource, any params, any region) xtype="any";
@declare function removeChars(required string String, required numeric start, required numeric count) xtype="any";
@declare function render(required string CFML, string dialect) xtype="any";
@declare function repeatString(required string String, required numeric count) xtype="any";
@declare function replace(required string String, required string substring1, required string substring2, string scope) xtype="any";
@declare function replaceList(required string String, required string list1, required string list2, string delimiter, string delimiterList1, string delimiterList2, boolean includeEmptyFields) xtype="any";
@declare function replaceListNoCase(required string String, required string list1, required string list2, string delimiter, string delimiterList1, string delimiterList2, boolean includeEmptyFields) xtype="any";
@declare function replaceNoCase(required string String, required string substring1, required string substring2, string scope) xtype="any";
@declare function reReplace(required string string, required Regex regex, required string substring, string scope) xtype="any";
@declare function reReplaceNoCase(required string String, required Regex reg_expression, required string substring, string scope) xtype="any";
@declare function restDeleteApplication(required any dirPath) xtype="any";
@declare function restInitApplication(required string dirPath, required string serviceMapping, string default, required string password) xtype="any";
@declare function restSetResponse(required any response) xtype="any";
@declare function reverse(required string String) xtype="any";
@declare function right(required string String, required numeric count) xtype="any";
@declare function rJustify(required string String, required numeric length) xtype="any";
@declare function round(required numeric number) xtype="any";
@declare function rTrim(required string String) xtype="any";
@declare function runAsync(function callback, numeric timeout) xtype="any";
@declare function second(required date date) xtype="any";
@declare function sendGatewayMessage(required string gatewayID, required struct data) xtype="any";
@declare function serialize(required any objToBeSerialized, required string type, required boolean useCustomSerializer) xtype="any";
@declare function serializeJSON(required variableName var, boolean serializeQueryByColumns, boolean useSecureJSONPrefix, boolean useCustomSerializer) xtype="any";
@declare function serializeXML(required any objToBeSerialized, required any useCustomSerializer) xtype="any";
@declare function sessionGetMetadata(required any region) xtype="any";
@declare function sessionInvalidate() xtype="any";
@declare function sessionRotate() xtype="any";
@declare function sessionstartTime() xtype="any";
@declare function setEncoding(required string scope_name, required string charset) xtype="any";
@declare function setLocale(required string new_locale) xtype="any";
@declare function setProfileString(required string inipath, required string section, required string entry, required string value) xtype="any";
@declare function setTimezone(required string timezone) xtype="any";
@declare function setVariable(required string name, required string value) xtype="any";
@declare function sgn(required numeric number) xtype="any";
@declare function sin(required numeric number) xtype="any";
@declare function sizeOf(required any obj, boolean complex) xtype="any";
@declare function sleep(required any duration) xtype="any";
@declare function soundEx(required string str) xtype="any";
@declare function spanExcluding(required string String, required string set) xtype="any";
@declare function spanIncluding(required string String, required string set) xtype="any";
@declare function spreadsheetAddAutoFilter(required any spreadsheetObj, required string autofilter) xtype="any";
@declare function spreadsheetAddColumn(required variableName spreadsheetObj, required string data, required numeric startrow, required numeric startcolumn, required boolean insert, boolean insert) xtype="any";
@declare function spreadsheetAddFreezePane(required variableName spreadsheetObj, required numeric freezeColumn, required numeric freezeRow, numeric hideColumn, numeric hideRow) xtype="any";
@declare function spreadsheetAddimage(required variableName spreadsheetObj, required string imagefilepath, required string anchor) xtype="any";
@declare function spreadsheetAddInfo(required variableName spreadsheetObj, required struct info) xtype="any";
@declare function spreadsheetAddPagebreaks(required any SpreadsheetObj, required string rowbreaks, required string colbreaks) xtype="any";
@declare function spreadsheetAddRow(required variableName spreadsheetObj, required string data, numeric row, numeric column, boolean insert, array datatype) xtype="any";
@declare function spreadsheetAddRows(required variableName spreadsheetObj, required any data, numeric row, numeric column, boolean insert, array datatype, boolean includeColumnNames) xtype="any";
@declare function spreadsheetAddSplitPane(required variableName spreadsheetObj, required numeric x, required numeric y, required numeric splitColumn, required numeric splitRow, string position) xtype="any";
@declare function spreadsheetCreateSheet(required variableName spreadsheetObj, required string name) xtype="any";
@declare function spreadsheetDeleteColumn(required variableName spreadsheetObj, required numeric column) xtype="any";
@declare function spreadsheetDeleteColumns(required variableName spreadsheetObj, required numeric range) xtype="any";
@declare function spreadsheetDeleteRow(required variableName spreadsheetObj, required numeric row) xtype="any";
@declare function spreadsheetDeleteRows(required variableName spreadsheetObj, required numeric range) xtype="any";
@declare function spreadsheetFormatCell(required any spreadsheetObj, required struct format, required numeric row, required numeric column) xtype="any";
@declare function spreadsheetFormatCellRange(required any spreadsheetObj, required struct format, required numeric startRow, required numeric startColumn, required numeric endRow, required numeric endColumn) xtype="any";
@declare function spreadsheetFormatColumn(required any spreadsheetObj, required struct format, required numeric column) xtype="any";
@declare function spreadsheetFormatColumns(required variableName spreadsheetObj, required string format, required string columns) xtype="any";
@declare function spreadsheetFormatRow(required any spreadsheetObj, required struct format, required numeric row) xtype="any";
@declare function spreadsheetFormatRows(required any spreadsheetObj, required struct format, required string rows) xtype="any";
@declare function spreadsheetGetCellComment(required string author, numeric column, string comment, string row) xtype="any";
@declare function spreadsheetGetCellFormula(required variableName spreadsheetObj, required numeric row, required numeric column) xtype="any";
@declare function spreadsheetGetCellValue(required variableName spreadsheetObj, required string row, required string column) xtype="any";
@declare function spreadsheetGetColumnCount(required any spreadsheetObj, string sheet) xtype="any";
@declare function spreadsheetInfo(required variableName spreadsheetObj) xtype="any";
@declare function spreadsheetMergeCells(required variableName spreadsheetObj, required numeric startrow, required numeric endrow, required numeric startcolumn, required numeric endcolumn) xtype="any";
@declare function spreadsheetNew(string sheetname, boolean xmlFormat) xtype="any";
@declare function spreadsheetRead(required string fileName, required variableName spreadsheetObj) xtype="any";
@declare function spreadsheetReadBinary(required variableName spreadsheetObj) xtype="any";
@declare function spreadsheetRemoveSheet(required any spreadsheetObj, required any sheetname) xtype="any";
@declare function spreadsheetSetActiveSheet(required variableName spreadsheetObj, string name) xtype="any";
@declare function spreadsheetSetActiveSheetNumber(required variableName spreadsheetObj, numeric number) xtype="any";
@declare function spreadsheetSetCellComment(required variableName spreadsheetObj, required string comment, required numeric row, required numeric column) xtype="any";
@declare function spreadsheetSetCellFormula(required variableName spreadsheetObj, required string formula, required numeric row, required numeric column) xtype="any";
@declare function spreadsheetSetCellValue(required variableName spreadsheetObj, required string value, required numeric row, required numeric column) xtype="any";
@declare function spreadsheetSetColumnWidth(required variableName spreadsheetObj, required numeric columnNumber, required numeric width) xtype="any";
@declare function spreadsheetSetFooter(required variableName spreadsheetObj, required string leftFooter, required string centerFooter, required string rightFooter) xtype="any";
@declare function spreadsheetSetHeader(required variableName spreadsheetObj, required string leftHeader, required string centerHeader, required string rightHeader) xtype="any";
@declare function spreadsheetSetRowHeight(required variableName spreadsheetObj, required numeric rowNumber, required numeric height) xtype="any";
@declare function spreadsheetShiftColumns(required variableName spreadsheetObj, required numeric start, numeric end, numeric start) xtype="any";
@declare function spreadsheetShiftRows(required variableName spreadsheetObj, required numeric start, required numeric end, numeric rows) xtype="any";
@declare function spreadsheetwrite(required variableName spreadsheetObj, required string fileName, string password, boolean overwrite) xtype="any";
@declare function sqr(required numeric number) xtype="any";
@declare function sslCertificateInstall(required string host, numeric port) xtype="any";
@declare function sslCertificateList(required string host, numeric port) xtype="any";
@declare function storeAddACL(required any url, required any ACLObject) xtype="any";
@declare function storeGetACL(required any ulr, required any ACLObject) xtype="any";
@declare function storeGetMetadata(required any url) xtype="any";
@declare function storeSetACL(required any url, required any ACLObject) xtype="any";
@declare function storeSetMetadata(required any url, required any region) xtype="any";
@declare function stringLen(required string string) xtype="any";
@declare function stripCR(required string String) xtype="any";
@declare function structAppend(required struct destStruct, required struct sourceStruct, boolean overwriteFlag) xtype="any";
@declare function structClear(required struct structure) xtype="any";
@declare function structCopy(required struct structure) xtype="any";
@declare function structCount(required struct structure) xtype="any";
@declare function structDelete(required string structure, required string key, boolean indicateNotExisting) xtype="any";
@declare function structEach(required string struct, required any callback, boolean parallel, numeric maxThreads) xtype="any";
@declare function structEquals(required struct struct1, required struct struct2) xtype="any";
@declare function structEvery(required struct struct, required function closure, boolean parallel, numeric maxThreads) xtype="any";
@declare function structFilter(required struct struct, required boolean callback, boolean parallel, numeric maxThreads) xtype="any";
@declare function structFind(required struct structure, required string key, any defaultValue) xtype="any";
@declare function structFindKey(required any top, required string value, required string scope) xtype="any";
@declare function structFindValue(required any top, required string value, string scope) xtype="any";
@declare function structGet(required string path) xtype="any";
@declare function structGetMetadata(required struct struct) xtype="any";
@declare function structInsert(required struct structure, required string key, required any value, boolean allowoverwrite) xtype="any";
@declare function structIsEmpty(required struct structure) xtype="any";
@declare function structIsOrdered(required struct struct) xtype="any";
@declare function structKeyArray(required struct structure) xtype="any";
@declare function structKeyExists(required struct structure, required string key) xtype="any";
@declare function structKeyList(required struct structure, string delimiter) xtype="any";
@declare function structKeyTranslate(required struct structure, boolean deepTranslation, boolean leaveOriginalKey) xtype="any";
@declare function structListNew(required numeric maxsize) xtype="any";
@declare function structMap(required struct struct, required any callback, boolean parallel, numeric maxThreads) xtype="any";
@declare function structNew(string structType) xtype="any";
@declare function structReduce(required struct struct, required any callback, required any initialVal) xtype="any";
@declare function structSetMetadata(required struct inputStruct, required struct metaStruct) xtype="any";
@declare function structSome(required struct struct, required boolean callback, boolean parallel, numeric maxThreads) xtype="any";
@declare function structSort(required struct base, string sorttype, string sortorder, string pathtosubelement, boolean localeSensitive, function callback) xtype="any";
@declare function structToSorted(required struct structure, function callback, string sorttype, string sortorder, boolean localeSensitive) xtype="any";
@declare function structUpdate(required struct structure, required string key, required any value) xtype="any";
@declare function structValueArray(required struct structure) xtype="any";
@declare function systemCacheClear(string cacheName) xtype="any";
@declare function systemOutput(required any obj, boolean addNewLine, boolean doErrorStream) xtype="any";
@declare function tan(required numeric number) xtype="any";
@declare function threadJoin(string threadName, numeric timeout) xtype="any";
@declare function threadTerminate(required string threadname) xtype="any";
@declare function throw(string message, string type, string detail, string errorcode, string extendedinfo, any object) xtype="any";
@declare function timeFormat(required date time, string mask) xtype="any";
@declare function toBase64(required any string_or_object, string encoding) xtype="any";
@declare function toBinary(required any base64_or_object) xtype="any";
@declare function toNumeric(required any value, any radix) xtype="any";
@declare function toScript(required any cfvar, required string javascriptvar, boolean outputformat, boolean asformat) xtype="any";
@declare function toString(required any any_value, string encoding) xtype="any";
@declare function trace(string var, string text, string type, string category, boolean inline, boolean abort) xtype="any";
@declare function transactionCommit() xtype="any";
@declare function transactionRollback(string savepoint) xtype="any";
@declare function transactionSetSavepoint(required string savepoint) xtype="any";
@declare function trim(required string String) xtype="any";
@declare function trueFalseFormat(required boolean value) xtype="any";
@declare function uCase(required string String) xtype="any";
@declare function ucFirst(required string string, boolean doAll, boolean doLowerIfAllUppercase) xtype="any";
@declare function unserializeJava(required string string) xtype="any";
@declare function urlDecode(required string urlencodedstring, string charset) xtype="any";
@declare function urlEncode(required string string, string charset, boolean force) xtype="any";
@declare function urlEncodedFormat(required string String, string charset) xtype="any";
@declare function urlSessionFormat(required URL requesturl) xtype="any";
@declare function val(required string String) xtype="any";
@declare function valueArray(required query query, required string column) xtype="any";
@declare function valueList(required QueryColumn column, string delimiter) xtype="any";
@declare function verifyClient() xtype="any";
@declare function webserviceNew(required string url, struct arguments) xtype="any";
@declare function week(required date date) xtype="any";
@declare function wrap(required string String, required numeric limit, boolean strip) xtype="any";
@declare function writeBody() xtype="any";
@declare function writeDump(required variableName var, string output, string format, boolean abort, string label, boolean metainfo, numeric top, string show, string hide, numeric keys, boolean expand, boolean showUDfs) xtype="any";
@declare function writeLog(required string text, string type, boolean application, string file, string log) xtype="any";
@declare function writeOutput(required string string, string encodeFor) xtype="any";
@declare function wsGetAllChannels(any channelName) xtype="any";
@declare function wsGetSubscribers(required any channel) xtype="any";
@declare function wsPublish(required any channel, required any message, any filterCriteria) xtype="any";
@declare function wsSendMessage(required any message) xtype="any";
@declare function xmlChildPos(required xml elem, required string childname, required numeric n) xtype="any";
@declare function xmlElemNew(required xml xmlobj, string namespace, required string childname) xtype="any";
@declare function xmlFormat(required string String, boolean escapeChars) xtype="any";
@declare function xmlGetNodeType(required xml xmlNode) xtype="any";
@declare function xmlNew(boolean casesensitive) xtype="any";
@declare function xmlParse(required string xmlString, boolean caseSensitive, string validator) xtype="any";
@declare function xmlSearch(required xml xmlNode, required string xpath, struct params) xtype="any";
@declare function xmlTransform(required xml xml, required string xsl, struct parameters) xtype="any";
@declare function xmlValidate(required any xmlDoc, string validator) xtype="any";
@declare function year(required date date) xtype="any";
@declare function yesNoFormat(required any value) xtype="any";
@!interface __cfEngine {
    abs: (number: numeric) => any,
    acos: (number: numeric) => any,
    addSOAPRequestHeader: (webservice: string, namespace: string, name: string, value: string, mustUnderstand?: boolean) => any,
    addSOAPResponseHeader: (namespace: string, name: string, value: string, mustUnderstand?: boolean) => any,
    ajaxLink: (url: string) => any,
    ajaxOnLoad: (functionName: string) => any,
    applicationStartTime: () => any,
    applicationStop: () => any,
    array: (values?: any) => any,
    arrayAppend: (array: any[], value: any, merge?: boolean) => any,
    arrayAvg: (array: any[]) => any,
    arrayClear: (array: any[]) => any,
    arrayContains: (array: any[], value: any, substringMatch?: any) => any,
    arrayContainsNoCase: (array: any[], value: any) => any,
    arrayDelete: (array: any[], value: any, scope?: string) => any,
    arrayDeleteAt: (array: any[], index: numeric) => any,
    arrayDeleteNoCase: (array: any[], value: any) => any,
    arrayEach: (array: any[], callback: any, parallel?: boolean, maxThreads?: numeric) => any,
    arrayEvery: (array: any[], closure: any, parallel?: boolean, maxThreads?: boolean) => any,
    arrayFilter: (array: any[], callback: boolean, parallel?: boolean, maxThreads?: numeric) => any,
    arrayFind: (array: any[], value: any) => any,
    arrayFindAll: (array: any[], valueorcallback?: any) => any,
    arrayFindAllNoCase: (array: any[], valueorcallback: any) => any,
    arrayFindNoCase: (array: any[], valueorcallback: any) => any,
    arrayFirst: (array: any[]) => any,
    arrayGetMetadata: (array: any[]) => any,
    arrayIndexExists: (array: any[], index: numeric) => any,
    arrayInsertAt: (array: any[], position: numeric, value: any) => any,
    arrayIsDefined: (array: string, index: numeric) => any,
    arrayIsEmpty: (array: any[]) => any,
    arrayLast: (array: any[]) => any,
    arrayLen: (array: any[]) => any,
    arrayMap: (array: any[], callback: any, parallel?: boolean, maxThreads?: numeric) => any,
    arrayMax: (array: any[]) => any,
    arrayMedian: (array: any[]) => any,
    arrayMerge: (array1: any[], array2: any[], leaveIndex?: boolean) => any,
    arrayMid: (array: any[], start: numeric, count?: numeric) => any,
    arrayMin: (array: any[]) => any,
    arrayNew: (dimension: numeric, isSynchronized?: boolean) => any,
    arrayPrepend: (array: any[], value: any) => any,
    arrayReduce: (array: any[], callback: any, initialValue?: any) => any,
    arrayResize: (array: any[], size: numeric) => any,
    arrayReverse: (array: any[]) => any,
    arraySet: (array: any[], start: numeric, end: numeric, value: any) => any,
    arraySetMetadata: (array: any[], metadata: {}) => any,
    arrayShift: (array: any[]) => any,
    arraySlice: (array: any[], offset: numeric, length?: numeric) => any,
    arraySome: (array: any[], callback: boolean, parallel?: boolean, maxThreads?: numeric) => any,
    arraySort: (array: any[], sortType: string, sortOrder?: string, callback?: any) => any,
    arraySplice: (array: any[], index: numeric, elementCountForRemoval?: numeric, replacements?: any[]) => any,
    arraySum: (array: any[], ignoreEmpty?: boolean) => any,
    arraySwap: (array: any[], position1: numeric, position2: numeric) => any,
    arrayToList: (array: any[], delimiter?: string) => any,
    arrayToStruct: (array: any[]) => any,
    asc: (string: string) => any,
    asin: (number: numeric) => any,
    atn: (number: numeric) => any,
    beat: (time?: any) => any,
    binaryDecode: (string: string, encoding: string) => any,
    binaryEncode: (binaryData: any, encoding: string) => any,
    bitAnd: (number1: numeric, number2: numeric) => any,
    bitMaskClear: (number: numeric, start: numeric, length: numeric) => any,
    bitMaskRead: (number: numeric, start: numeric, length: numeric) => any,
    bitMaskSet: (number: numeric, mask: numeric, start: numeric, length: numeric) => any,
    bitNot: (number: numeric) => any,
    bitOr: (number1: numeric, number2: numeric) => any,
    bitShln: (number: numeric, count: numeric) => any,
    bitShrn: (number: numeric, count: numeric) => any,
    bitXor: (number1: numeric, number2: numeric) => any,
    booleanFormat: (value: numeric) => any,
    bundleInfo: (obj: any) => any,
    cacheClear: (filterOrTags?: any, cacheName?: string) => any,
    cacheCount: (cacheName?: string) => any,
    cacheDelete: (id: string, throwOnError?: boolean, cacheName?: string) => any,
    cacheGet: (id: string, region?: string, cacheName?: string, throwWhenNotExist?: boolean) => any,
    cacheGetAll: (filter?: string, cacheName?: string) => any,
    cacheGetAllIds: () => any,
    cacheGetDefaultCacheName: (type: string) => any,
    cacheGetEngineProperties: () => any,
    cacheGetMetadata: (id: string, objectType?: string, region?: string) => any,
    cacheGetProperties: (region?: string) => any,
    cacheGetSession: (objectType: string, isKey?: boolean) => any,
    cacheIdExists: (id: string, region?: string) => any,
    cacheKeyExists: (key: string, cacheName?: string) => any,
    cachePut: (id: string, value: string, timespan?: string, idleTime?: string, region?: string, throwOnError?: boolean) => any,
    cacheRegionExists: (region: string, password?: string) => any,
    cacheRegionNew: (region: string, properties?: {}, throwOnError?: boolean, password?: string) => any,
    cacheRegionRemove: (region: string, password?: string) => any,
    cacheRemove: (id: any, throwOnError?: boolean, region?: string, exact?: boolean) => any,
    cacheRemoveAll: (region?: string) => any,
    cacheSetProperties: (properties: {}, region?: string) => any,
    callStackDump: (output?: string) => any,
    callStackGet: () => any,
    canonicalize: (input: string, restrictMultiple: boolean, restrictMixed: boolean, throwOnError?: boolean) => any,
    ceiling: (number: numeric) => any,
    cfusion_Decrypt: (string: string, key: string) => any,
    cfusion_Encrypt: (string: string, key: string) => any,
    charsetDecode: (string: string, encoding: string) => any,
    charsetEncode: (binaryData: any, encoding: string) => any,
    chr: (number: numeric) => any,
    cJustify: (string: string, length: numeric) => any,
    collectionEach: (collection: any, closure: any) => any,
    collectionEvery: (collection: any, closure: any, parallel?: boolean, maxThreads?: numeric) => any,
    collectionFilter: (collection: any, filter: any, parallel?: boolean, maxThreads?: numeric) => any,
    collectionMap: (collection: any, closure: any, parallel?: boolean, maxThreads?: numeric) => any,
    collectionReduce: (collection: any, closure: any, initalValue?: any) => any,
    collectionSome: (collection: any, closure: any, parallel?: boolean, maxThreads?: numeric) => any,
    compare: (string1: string, string2: string) => any,
    compareNoCase: (string1: string, string2: string) => any,
    componentCacheClear: () => any,
    componentCacheList: () => any,
    componentInfo: (component: component) => any,
    compress: (format: string, source: string, target: string, includeBaseFolder?: boolean, mode?: string) => any,
    contractPath: (path_absolute: string, placeholder?: boolean) => any,
    cos: (number: numeric) => any,
    createDate: (year: numeric, month: numeric, day: numeric) => any,
    createDateTime: (year: numeric, month: numeric, day: numeric, hour: numeric, minute: numeric, second: numeric, millisecond?: numeric, timezone?: numeric) => any,
    createDynamicProxy: (cfc: any, interfaces: any[]) => any,
    createGUID: () => any,
    createobject: (type: string, className: string, context?: string, locale?: string, servername?: string, component_name?: string, urltowsdl?: string, portname?: string, bundleName?: string, bundleVersion?: string) => any,
    createODBCDate: (date: any) => any,
    createODBCDateTime: (date: any) => any,
    createODBCTime: (date: any) => any,
    createTime: (hour: numeric, minute: numeric, second: numeric, millisecond?: numeric, timezone?: numeric) => any,
    createTimespan: (days: numeric, hours: numeric, minutes: numeric, seconds: numeric) => any,
    createUniqueID: () => any,
    createUUID: () => any,
    csrfGenerateToken: (key?: string, forceNew?: boolean) => any,
    csrfVerifyToken: (token: string, key?: string) => any,
    ctCacheClear: () => any,
    ctCacheList: () => any,
    datasourceFlushMetacache: (datasourceName?: string) => any,
    dateAdd: (datepart: string, number: numeric, date: any) => any,
    dateCompare: (date1: any, date2: any, datePart?: string) => any,
    dateConvert: (conversionType: string, date: any) => any,
    dateDiff: (datepart: string, date1: any, date2: any) => any,
    dateFormat: (date: any, mask?: string) => any,
    datePart: (datepart: string, date: any, timezone?: any) => any,
    dateTimeFormat: (date: any, mask?: string, timezone?: string) => any,
    day: (date: any) => any,
    dayOfWeek: (date: any, calendar?: string) => any,
    dayOfWeekAsString: (dayOfWeek: numeric, locale?: any) => any,
    dayOfWeekShortAsString: (day_of_week: numeric, locale?: string) => any,
    dayOfYear: (date: any) => any,
    daysInMonth: (date: any) => any,
    daysInYear: (date: any) => any,
    de: (string: string) => any,
    decimalFormat: (number: numeric) => any,
    decodeForHTML: (string: any) => any,
    decodeFromURL: (string: any) => any,
    decrementValue: (number: numeric) => any,
    decrypt: (string: string, key: string, algorithm?: string, encoding?: string, iv?: any, salt?: any, iterations?: numeric) => any,
    decryptBinary: (binaryData: string, key: string, algorithm?: string, encoding?: string, iv?: any, salt?: any, iterations?: numeric) => any,
    deleteClientVariable: (name: string) => any,
    deserialize: (string: string, type: string, useCustomSerializer: boolean) => any,
    deserializeJSON: (json: string, strictMapping?: boolean, useCustomSerializer?: boolean) => any,
    deserializeXML: (string: string, useCustomSerializer: boolean) => any,
    directoryCopy: (source: string, destination: string, recurse?: boolean, filter?: any, createPath?: boolean) => any,
    directoryCreate: (path: string, createPath?: boolean, ignoreExists?: boolean) => any,
    directoryDelete: (path: string, recurse?: boolean) => any,
    directoryExists: (path: string, allowRealPath?: boolean) => any,
    directoryList: (path: string, recurse?: boolean, listInfo?: string, filter?: string, sort?: string, type?: string) => any,
    directoryRename: (oldPath: string, newPath: string, createPath?: boolean) => any,
    dollarFormat: (number: numeric) => any,
    dotnetToCFType: (variableName: any) => any,
    duplicate: (object: any, deepcopy?: boolean) => any,
    each: (collection: any, closure: any, parallel?: boolean, maxThreads?: numeric) => any,
    echo: (string: string) => any,
    empty: (variable: any) => any,
    encodeFor: (type: string, value: string) => any,
    encodeForCSS: (string: string, canonicalize?: boolean) => any,
    encodeForDN: (string: string, canonicalize?: boolean) => any,
    encodeForHTML: (string: string, canonicalize?: boolean) => any,
    encodeForHTMLAttribute: (string: string, canonicalize?: boolean) => any,
    encodeForJavaScript: (string: string, canonicalize?: boolean, canonicalize?: boolean) => any,
    encodeForLDAP: (string: string, canonicalize?: boolean) => any,
    encodeForURL: (string: string, canonicalize?: boolean) => any,
    encodeForXML: (string: string, canonicalize?: boolean) => any,
    encodeForXMLAttribute: (string: string, canonicalize?: boolean) => any,
    encodeForXPath: (string: string, canonicalize?: boolean) => any,
    encrypt: (string: string, key: string, algorithm?: string, encoding?: string, iv?: any, salt?: any, iterations?: numeric) => any,
    encryptBinary: (binaryData: any, key: string, algorithm?: string, iv?: any, salt?: any, iterations?: numeric) => any,
    entityDelete: (entity: any) => any,
    entityLoad: (entityName: string, id?: any, Filter?: any, unique?: boolean, Order?: string, options?: {}) => any,
    entityLoadByExample: (sampleEntity: string, unique?: boolean, matchCriteria?: any) => any,
    entityLoadByPK: (entity: string, id: string, unique?: boolean) => any,
    entityMerge: (entity: any) => any,
    entityNameArray: () => any,
    entityNameList: (delimiter?: string) => any,
    entityNew: (entityName: string, properties?: {}, ignoreExtras?: boolean) => any,
    entityReload: (entity: any) => any,
    entitySave: (entity: any, forceInsert?: boolean) => any,
    entityToQuery: (entity: any, name?: string) => any,
    esapiDecode: (decodeFrom: string, string: string) => any,
    esapiEncode: (encodeFor: string, string: string) => any,
    evaluate: (expression: string) => any,
    exp: (number: numeric) => any,
    expandPath: (path: string) => any,
    extract: (format: string, source: string, target: string) => any,
    fileAppend: (file: string, data: string, charset?: string, addNewLine?: boolean) => any,
    fileClose: (file: any) => any,
    fileCopy: (source: string, destination: string) => any,
    fileDelete: (filePath: string) => any,
    fileExists: (filePath: string) => any,
    fileGetMimeType: (file: any, strict?: boolean) => any,
    fileIsEOF: (file: any) => any,
    fileMove: (source: string, destination: string) => any,
    fileOpen: (filePath: string, mode?: string, charset?: string, seekable?: boolean) => any,
    fileRead: (filePath: any, charset?: any, bufferSize?: any) => any,
    fileReadBinary: (filePath: string) => any,
    fileReadLine: (file: any) => any,
    fileSeek: (file: any, position: numeric) => any,
    fileSetAccessMode: (filePath: string, mode: string) => any,
    fileSetAttribute: (filePath: string, attribute: string) => any,
    fileSetLastModified: (filePath: string, date: any) => any,
    fileSkipBytes: (file: any, skipCount: numeric) => any,
    fileUpload: (destination: string, fileField?: string, mimeType?: string, onConflict?: string, strict?: boolean) => any,
    fileUploadAll: (destination: string, mimeType?: string, onConflict?: string, strict?: boolean, continueOnError?: boolean, errorVariableName?: string, allowedExtensions?: string) => any,
    fileWrite: (filePath: any, data: any, charset?: string) => any,
    fileWriteLine: (file: any, data: string) => any,
    find: (substring: string, string: string, start?: numeric) => any,
    findNoCase: (substring: string, string: string, start?: numeric) => any,
    findOneOf: (set: string, string: string, start?: numeric) => any,
    firstDayOfMonth: (date: any) => any,
    fix: (number: numeric) => any,
    floor: (number: numeric) => any,
    formatBaseN: (number: numeric, radix: numeric) => any,
    generatePBKDFKey: (algorithm: string, passphrase: string, salt: string, iterations: numeric, keySize: numeric) => any,
    generateSecretKey: (algorithm?: string, keysize?: numeric) => any,
    getApplicationMetadata: () => any,
    getApplicationSettings: (suppressFunction: boolean) => any,
    getAuthUser: () => any,
    getBaseTagData: (tagname: string, level?: numeric) => any,
    getBaseTagList: (caller?: any) => any,
    getBaseTemplatePath: () => any,
    getBuiltinFunction: (name: string) => any,
    getCanonicalPath: (path: string) => any,
    getClassPath: () => any,
    getClientVariablesList: () => any,
    getComponentMetadata: (path: string) => any,
    getContextRoot: () => any,
    getCpuUsage: (interval?: numeric) => any,
    getCurrentContext: () => any,
    getCurrentTemplatePath: () => any,
    getDirectoryFromPath: (path: string) => any,
    getEncoding: (scope_name: string) => any,
    getException: (javaobject: any) => any,
    getFileFromPath: (path: string) => any,
    getFileInfo: (path: string) => any,
    getFreeSpace: (path: any) => any,
    getFunctionCalledName: () => any,
    getFunctionData: (functionName: string, dialect?: string) => any,
    getFunctionKeywords: () => any,
    getFunctionList: () => any,
    getGatewayHelper: (gatewayID: string) => any,
    getHTTPRequestData: (includeBody: boolean) => any,
    getHTTPTimeString: (DateTime?: string) => any,
    getK2ServerDocCount: () => any,
    getK2ServerDocCountLimit: () => any,
    getLocale: () => any,
    getLocaleCountry: () => any,
    getLocaleDisplayName: () => any,
    getLocaleInfo: (locale?: string, dspLocale?: string) => any,
    getLocaleLanguage: () => any,
    getLocalhostIP: () => any,
    getLuceeID: () => any,
    getMemoryUsage: (type?: string) => any,
    getMetadata: (object: any) => any,
    getMetricData: (mode: string) => any,
    getNumericDate: (arg1: any) => any,
    getPageContext: () => any,
    getPrinterInfo: (printer?: string) => any,
    getPrinterList: (delimiter?: string) => any,
    getProfileSections: (inifile: string) => any,
    getProfileString: (inipath: string, section: string, entry: string) => any,
    getReadableImageFormats: () => any,
    getSafeHTML: (inputstring: string, PolicyFile: string, throwOnError: boolean) => any,
    getSOAPRequest: (webservice?: any) => any,
    getSOAPRequestHeader: (namespace: string, name: string, asXML?: boolean) => any,
    getSOAPResponse: (webservice: any) => any,
    getSOAPResponseHeader: (webservice: any, namespace: string, name: string, asXML?: boolean) => any,
    getSystemFreeMemory: () => any,
    getSystemTotalMemory: (region?: any) => any,
    getTagData: (nameSpaceWithSeperator: string, tagName: string, dialect?: string) => any,
    getTagList: () => any,
    getTempDirectory: () => any,
    getTempFile: (dir: string, prefix: string) => any,
    getTemplatePath: () => any,
    getTickCount: () => any,
    getTimezone: () => any,
    getTimezoneInfo: (timezone: string, locale: string) => any,
    getToken: (string: string, index: numeric, delimiters?: string) => any,
    getTotalSpace: (path: any) => any,
    getUserRoles: () => any,
    getVariable: (name: string) => any,
    getVFSMetadata: (fileSystemType: string) => any,
    getWriteableImageFormats: () => any,
    hash: (string: string, algorithm?: string, encoding?: string, additionalIterations?: numeric) => any,
    hash40: (input: any, algorithm?: string, encoding?: string, numIterations?: numeric) => any,
    hmac: (message: any, key: any, algorithm?: string, encoding?: string) => any,
    hour: (date: any) => any,
    htmlCodeFormat: (string: string, version?: numeric) => any,
    htmlEditFormat: (string: string, version?: numeric) => any,
    htmlParse: (html: string, caseSensitive?: boolean) => any,
    iIf: (condition: boolean, expression1: string, expression2: string) => any,
    imageAddBorder: (name: string, thickness: string, color?: string, bordertype?: string) => any,
    imageBlur: (name: string, blurradius?: numeric) => any,
    imageClearRect: (name: string, x: numeric, y: numeric, width: numeric, height: numeric) => any,
    imageCopy: (name: string, x: numeric, y: numeric, width: numeric, height: numeric, dx?: numeric, dy?: numeric) => any,
    imageCreateCaptcha: (height: any, width: any, text: any, difficulty?: any, font?: any, fontsize?: any) => any,
    imageCrop: (name: string, x: numeric, y: numeric, width: numeric, height: numeric) => any,
    imageDrawArc: (name: string, x: numeric, y: numeric, width: numeric, height: numeric, startAngle: numeric, archAngle: numeric, filled?: boolean) => any,
    imageDrawBeveledRect: (name: string, x: numeric, y: numeric, width: numeric, height: numeric, raised: boolean, filled?: boolean) => any,
    imageDrawCubicCurve: (name: any, ctrlx1: string, ctrly1: numeric, ctrlx2: numeric, ctrly2: numeric, x1: numeric, y1: numeric, x2: numeric, y2: numeric) => any,
    imageDrawImage: (name: any, image: any, x: numeric, y: numeric) => any,
    imageDrawLine: (name: string, x1: numeric, y1: numeric, x2: numeric, y2: numeric) => any,
    imageDrawLines: (name: string, xcords: numeric, ycords: numeric, isPolygon?: boolean, filled?: boolean) => any,
    imageDrawOval: (name: string, x: numeric, y: numeric, width: numeric, height: numeric, filled?: boolean) => any,
    imageDrawPoint: (name: string, x: numeric, y: numeric) => any,
    imageDrawQuadraticCurve: (name: any, x1: numeric, y1: numeric, ctrlx1: string, ctrly1: numeric, x2: numeric, y2: numeric) => any,
    imageDrawRect: (name: string, x: numeric, y: numeric, width: numeric, height: numeric, filled?: boolean) => any,
    imageDrawRoundRect: (name: string, x: numeric, y: numeric, width: numeric, height: numeric, arcwidth: numeric, archeight: numeric, filled?: boolean) => any,
    imageDrawText: (name: string, str: string, x: numeric, y: numeric, attributecollection?: {}) => any,
    imageFilter: (name: any, filtername: string, parameters?: {}) => any,
    imageFilterColorMap: (type: string, lineColor1?: string, lineColor2?: string) => any,
    imageFilterCurves: () => any,
    imageFilterKernel: (width: numeric, height: numeric, data: any) => any,
    imageFilterWarpGrid: (rows: numeric, cols: numeric, width: numeric, height: numeric) => any,
    imageFlip: (name: string, transpose: string) => any,
    imageFonts: () => any,
    imageFormats: () => any,
    imageGetBlob: (source: string) => any,
    imageGetBufferedImage: (name: string) => any,
    imageGetExifMetaData: (name: string) => any,
    imageGetEXIFTag: (name: string, tagName: string) => any,
    imageGetHeight: (name: string) => any,
    imageGetIPTCMetaData: (name: string) => any,
    imageGetIPTCtag: (name: string, tagName: string) => any,
    imageGetMetadata: (name: string) => any,
    imageGetWidth: (name: string) => any,
    imageGrayScale: (name: string) => any,
    imageInfo: (name: string) => any,
    imageMakeColorTransparent: (img: any, color: any) => any,
    imageMakeTranslucent: (img: any, percentage: any) => any,
    imageNegative: (name: string) => any,
    imageNew: (source?: string, width?: numeric, height?: numeric, imagetype?: string, canvascolor?: string) => any,
    imageOverlay: (source1: string, source2: string, rule?: string, alpha?: string) => any,
    imagePaste: (image1: string, image2: string, x: numeric, y: numeric) => any,
    imageRead: (path: string) => any,
    imageReadBase64: (string: string) => any,
    imageResize: (name: string, width: numeric, height: numeric, interpolation?: string, blurfactor?: boolean) => any,
    imageRotate: (name: string, angle: numeric, x?: numeric, y?: numeric, interpolation?: string) => any,
    imageRotateDrawingAxis: (name: string, angle: numeric, x?: numeric, y?: numeric) => any,
    imageScaleTofit: (name: string, fitWidth: numeric, fitHeight: numeric, interpolation?: string, blurfactor?: boolean) => any,
    imageSetAntialiasing: (name: string, antialias?: boolean) => any,
    imageSetBackgroundColor: (name: any, color: any) => any,
    imageSetDrawingAlpha: (name: any, alpha: numeric) => any,
    imageSetDrawingColor: (name: string, color: any) => any,
    imageSetDrawingStroke: (name: string, attributecollection?: {}) => any,
    imageSetDrawingTransparency: (name: string, percent: numeric) => any,
    imageSharpen: (name: string, gain?: numeric) => any,
    imageShear: (name: string, shear: numeric, direction?: string, interpolation?: string) => any,
    imageShearDrawingAxis: (name: string, shrx: numeric, shry: numeric) => any,
    imageTranslate: (name: string, xTrans: numeric, yTrans: numeric, interpolation?: string) => any,
    imageTranslateDrawingAxis: (name: any, x: numeric, y: numeric) => any,
    imageWrite: (name: string, destination?: string, quality?: string, overwrite?: boolean) => any,
    imageWriteBase64: (name: string, destination: string, format: string, inHTMLFormat?: boolean, overwrite?: boolean) => any,
    imageXORDrawingMode: (name: string, c1: string) => any,
    incrementValue: (number: numeric) => any,
    inputBaseN: (string: string, radix: string) => any,
    insert: (substring: string, string: string, position: numeric) => any,
    int: (number: numeric) => any,
    invalidateOauthAccesstoken: (token: any, type: any) => any,
    invoke: (instance: string, methodname: string, arguments?: any) => any,
    isArray: (value: any, number?: numeric) => any,
    isBinary: (value: any) => any,
    isBoolean: (value: any) => any,
    isClosure: (object: any) => any,
    isCustomFunction: (object: any) => any,
    isDate: (object: any) => any,
    isDDX: (path: string) => any,
    isDebugMode: () => any,
    isDefined: (variable_name: string) => any,
    isEmpty: (value: any) => any,
    isFileobject: (object: any) => any,
    isImage: (name: string) => any,
    isImageFile: (path: string) => any,
    isInstanceOf: (object: any, typename: string) => any,
    isIPInRange: (ips: any, ip: string) => any,
    isIPV6: (IP: string) => any,
    isJSON: (var: string) => any,
    isK2ServerABroker: () => any,
    isK2ServerDocCountExceeded: () => any,
    isK2ServerOnline: () => any,
    isLeapYear: (year: numeric) => any,
    isLocalhost: (ipaddress: string) => any,
    isNotMap: (obj: any) => any,
    isNull: (object: any) => any,
    isNumeric: (string: string) => any,
    isNumericDate: (number: numeric) => any,
    isobject: (value: any) => any,
    isPDFArchive: (path: string, standard: string) => any,
    isPDFFile: (path: string) => any,
    isPDFobject: (value: any) => any,
    isQuery: (value: string) => any,
    isSafeHTML: (inputstring: string, PolicyFile?: string) => any,
    isSimpleValue: (value: any) => any,
    isSOAPRequest: () => any,
    isSpreadsheetFile: (file: string) => any,
    isSpreadsheetobject: (object: any) => any,
    isStruct: (variable: any) => any,
    isUserInAnyRole: (roleList: string) => any,
    isUserInRole: (role_name: string) => any,
    isUserLoggedIn: () => any,
    isValid: (type: string, value: any, min?: numeric, max?: numeric, pattern?: string) => any,
    isValidOauthAccesstoken: (token: any, type: any) => any,
    isVideoFile: (path: string) => any,
    isWDDX: (value: any) => any,
    isXML: (value: string) => any,
    isXMLAttribute: (value: any) => any,
    isXMLDoc: (value: any) => any,
    isXMLElem: (value: any) => any,
    isXMLNode: (value: any) => any,
    isXMLRoot: (value: any) => any,
    isZipFile: (path: string) => any,
    javacast: (type: string, variable: string) => any,
    jsStringFormat: (string: string) => any,
    lCase: (string: string) => any,
    left: (string: string, count: numeric) => any,
    len: (object: any) => any,
    listAppend: (list: string, value: string, delimiters?: string, includeEmptyFields?: boolean) => any,
    listAvg: (list: string, delimiters?: string, multiCharacterDelimiter?: boolean) => any,
    listChangeDelims: (list: string, new_delimiter: string, delimiters?: string, includeEmptyValues?: string) => any,
    listCompact: (list: string, delimiters?: string, multiCharacterDelimiter?: boolean) => any,
    listContains: (list: string, substring: string, delimiters?: string) => any,
    listContainsNoCase: (list: string, substring: string, delimiters?: string) => any,
    listDeleteAt: (list: string, position: numeric, delimiters?: string) => any,
    listEach: (str: any, function: any, delim: any, includeEmptyFields?: any) => any,
    listEvery: (list: string, closure: any, delimiter?: string, includeEmptyFields?: boolean, multiCharacterDelimiter?: boolean, parallel?: boolean, maxThreads?: numeric) => any,
    listFilter: (list: any, function: any) => any,
    listFind: (list: string, value: string, delimiters?: string, includeEmptyValues?: string) => any,
    listFindNoCase: (list: string, value: string, delimiters?: string, includeEmptyValues?: string) => any,
    listFirst: (list: string, delimiters?: string) => any,
    listGetAt: (list: string, position: numeric, delimiters?: string, includeEmptyValues?: boolean) => any,
    listIndexExists: (list: string, index: numeric, delimiter?: string, includeEmptyFields?: boolean) => any,
    listInsertAt: (list: string, position: numeric, value: string, delimiters?: string) => any,
    listItemTrim: (list: string, delimiters?: string, includeEmptyFields?: boolean) => any,
    listLast: (list: string, delimiters?: string, includeEmptyValues?: boolean) => any,
    listLen: (list: string, delimiters?: string, includeEmptyValues?: string) => any,
    listMap: (list: string, function: any, intialValue?: any, delimiter?: string, includeEmptyFields?: boolean) => any,
    listPrepend: (list: string, value: string, delimiters?: string, includeEmptyFields?: boolean) => any,
    listQualify: (list: string, qualifier: string, delimiters?: string, elements?: string, includeEmptyFields?: boolean) => any,
    listReduce: (list: string, function: any, intialValue: any, delimiter: string, includeEmptyFields: boolean) => any,
    listRemoveDuplicates: (list: string, delimiter?: string, ignoreCase?: boolean) => any,
    listRest: (list: string, delimiters?: string) => any,
    listSetAt: (list: string, position: numeric, value: string, delimiters?: string) => any,
    listSome: (list: string, closure: any, delimiter?: string, includeEmptyFields?: boolean, multiCharacterDelimiter?: boolean, parallel?: boolean, maxThreads?: numeric) => any,
    listSort: (list: string, sort_type: string, sort_order?: string, delimiters?: string) => any,
    listToArray: (list: string, delimiters?: string, includeEmptyFields?: boolean, multiCharacterDelimiter?: boolean) => any,
    listTrim: (list: string, delimiters?: string) => any,
    listValueCount: (list: string, value: string, delimiters?: string) => any,
    listValueCountNoCase: (list: string, value: string, delimiters?: string) => any,
    lJustify: (string: string, length: numeric) => any,
    location: (url: string, addtoken?: boolean, statuscode?: numeric) => any,
    log: (number: numeric) => any,
    log10: (number: numeric) => any,
    lsCurrencyFormat: (number: numeric, type?: string) => any,
    lsDateFormat: (date: any, mask?: string, locale?: string) => any,
    lsDateTimeFormat: (date: any, mask?: any, locale?: any, timeZone?: any) => any,
    lsDayOfWeek: (date: any, locale?: string, timezone?: string) => any,
    lsEuroCurrencyFormat: (currency: string, type: string) => any,
    lsIsCurrency: (string: string) => any,
    lsIsDate: (string: string) => any,
    lsIsNumeric: (string: string) => any,
    lsNumberFormat: (number: numeric, mask?: string) => any,
    lsParseCurrency: (string: string) => any,
    lsParseDateTime: (dt_string: string) => any,
    lsParseEuroCurrency: (currency_string: string) => any,
    lsParseNumber: (string: string, locale?: string) => any,
    lsTimeFormat: (time: any, mask?: string) => any,
    lsWeek: (date: any, locale?: string, timezone?: string) => any,
    lTrim: (string: string) => any,
    manifestRead: (path: string) => any,
    max: (number1: numeric, number2: numeric) => any,
    metaphone: (str: string) => any,
    mid: (string: string, start: numeric, count: numeric) => any,
    millisecond: (date: any, timezone?: string) => any,
    min: (number1: numeric, number2: numeric) => any,
    minute: (date: any) => any,
    month: (date: any) => any,
    monthAsString: (month_number: numeric) => any,
    monthShortAsString: (monthnumber: numeric) => any,
    newLine: () => any,
    now: () => any,
    nowServer: () => any,
    nullValue: () => any,
    numberFormat: (number: numeric, mask?: string) => any,
    objectEquals: (Param1: any, Param2: any) => any,
    objectLoad: (binaryobject?: any, filepath?: string) => any,
    objectSave: (object: any, file?: string) => any,
    onApplicationEnd: (ApplicationScope: {}) => any,
    onApplicationStart: () => any,
    onError: (exception: {}, eventName: string) => any,
    onMissingMethod: (missingMethodName: string, missingMethodArguments: {}) => any,
    onMissingTemplate: (targetPage: string) => any,
    onRequest: (targetPage: string) => any,
    onRequestEnd: (targetPage: string) => any,
    onRequestStart: (targetPage: string) => any,
    onServerStart: () => any,
    onSessionEnd: (sessionScope: {}, applicationScope: {}) => any,
    onSessionStart: () => any,
    ormClearSession: (datasource?: string) => any,
    ormCloseAllSessions: (region: any) => any,
    ormCloseSession: (datasource?: string) => any,
    ormEvictCollection: (componentName: string, relationName: string, id?: string) => any,
    ormEvictEntity: (componentName: string, id?: string) => any,
    ormEvictQueries: (cacheName?: string) => any,
    ormExecuteQuery: (hql: string, params?: any, unique?: boolean, queryoptions?: string) => any,
    ormFlush: (datasource?: string) => any,
    ormFlushAll: () => any,
    ormGetSession: () => any,
    ormGetSessionFactory: () => any,
    ormIndex: () => any,
    ormIndexPurge: (region: any) => any,
    ormReload: () => any,
    ormSearch: (query_text: any, entityName: any, fields: any, optionMap: any) => any,
    ormSearchOffline: (query_text: any, entityName: any, fields_to_be_selected: any, fields: any, optionMap?: any, extraoptions?: any) => any,
    pagePoolClear: () => any,
    pagePoolList: () => any,
    paragraphFormat: (string: string) => any,
    parameterExists: (parameter: any) => any,
    parseDateTime: (dt_string: string, pop_conversion?: string) => any,
    parseNumber: (number: string, radix?: string) => any,
    pi: () => any,
    precisionEvaluate: (expressions: string) => any,
    preserveSingleQuotes: (variable: string) => any,
    quarter: (date: any) => any,
    query: () => any,
    queryAddColumn: (query: any, column_name: string, datatype?: string, array_name: any[]) => any,
    queryAddRow: (query: any) => any,
    queryAppend: (query1: any, query2: any) => any,
    queryClear: (query: any) => any,
    queryColumnArray: (query: any) => any,
    queryColumnCount: (query: any) => any,
    queryColumnData: (query: any, columnName: string, closure?: any) => any,
    queryColumnExists: (query: any, column: string) => any,
    queryColumnList: (query: any, delimiter?: string) => any,
    queryConvertForGrid: (query: string, page: numeric, pageSize: numeric) => any,
    queryCurrentRow: (query: any) => any,
    queryDeleteColumn: (query: any, column: string) => any,
    queryDeleteRow: (query: any, row?: numeric) => any,
    queryEach: (query: any, callback: any, parallel?: boolean, maxThreads?: numeric) => any,
    queryEvery: (query: any, closure: any, parallel?: boolean, maxThreads?: numeric) => any,
    queryExecute: (sql: string, params?: any, options?: {}) => any,
    queryFilter: (query: any, callback: boolean, parallel?: boolean, maxThreads?: numeric) => any,
    queryGetCell: (query: any, column_name: string, row_number?: numeric) => any,
    queryGetResult: (query: any) => any,
    queryGetRow: (query: any, rowNumber: any) => any,
    queryKeyExists: (query: any, key: string) => any,
    queryMap: (query: any, callback: boolean, parallel?: boolean, maxThreads?: numeric) => any,
    queryNew: (columnList: string, columnTypeList?: string, rowData?: any) => any,
    queryPrepend: (query1: any, query2: any) => any,
    queryRecordCount: (query: any) => any,
    queryReduce: (query: any, callback: any, initialValue?: any) => any,
    queryReverse: (query: any) => any,
    queryRowData: (query: any, rowNumber: numeric) => any,
    querySetCell: (query: any, column: string, value: any, row?: numeric) => any,
    querySlice: (query: any, offset: numeric, length?: numeric) => any,
    querySome: (query: any, callback: boolean, parallel?: boolean, maxThreads?: numeric) => any,
    querySort: (query: any, sortFunction: any, direction?: string) => any,
    quotedValueList: (column: any, delimiter?: string) => any,
    rand: (algorithm?: string) => any,
    randomize: (number: numeric, algorithm?: string) => any,
    randRange: (number1: numeric, number2: numeric, algorithm?: string) => any,
    reEscape: (string: any) => any,
    reFind: (reg_expression: any, string: string, start?: numeric, returnsubexpressions?: boolean, scope?: string) => any,
    reFindNoCase: (reg_expression: any, string: string, start?: numeric, returnsubexpressions?: boolean, scope?: string) => any,
    releaseCOMobject: (objectName: any) => any,
    reMatch: (reg_expression: string, string: string) => any,
    reMatchNoCase: (reg_expression: string, string: string) => any,
    removeCachedQuery: (SQL: any, datasource: any, params?: any, region?: any) => any,
    removeChars: (string: string, start: numeric, count: numeric) => any,
    render: (CFML: string, dialect?: string) => any,
    repeatString: (string: string, count: numeric) => any,
    replace: (string: string, substring1: string, substring2: string, scope?: string) => any,
    replaceList: (string: string, list1: string, list2: string, delimiter?: string, delimiterList1?: string, delimiterList2?: string, includeEmptyFields?: boolean) => any,
    replaceListNoCase: (string: string, list1: string, list2: string, delimiter?: string, delimiterList1?: string, delimiterList2?: string, includeEmptyFields?: boolean) => any,
    replaceNoCase: (string: string, substring1: string, substring2: string, scope?: string) => any,
    reReplace: (string: string, regex: any, substring: string, scope?: string) => any,
    reReplaceNoCase: (string: string, reg_expression: any, substring: string, scope?: string) => any,
    restDeleteApplication: (dirPath: any) => any,
    restInitApplication: (dirPath: string, serviceMapping: string, default?: string, password: string) => any,
    restSetResponse: (response: any) => any,
    reverse: (string: string) => any,
    right: (string: string, count: numeric) => any,
    rJustify: (string: string, length: numeric) => any,
    round: (number: numeric) => any,
    rTrim: (string: string) => any,
    runAsync: (callback?: any, timeout?: numeric) => any,
    second: (date: any) => any,
    sendGatewayMessage: (gatewayID: string, data: {}) => any,
    serialize: (objToBeSerialized: any, type: string, useCustomSerializer: boolean) => any,
    serializeJSON: (var: any, serializeQueryByColumns?: boolean, useSecureJSONPrefix?: boolean, useCustomSerializer?: boolean) => any,
    serializeXML: (objToBeSerialized: any, useCustomSerializer: any) => any,
    sessionGetMetadata: (region: any) => any,
    sessionInvalidate: () => any,
    sessionRotate: () => any,
    sessionstartTime: () => any,
    setEncoding: (scope_name: string, charset: string) => any,
    setLocale: (new_locale: string) => any,
    setProfileString: (inipath: string, section: string, entry: string, value: string) => any,
    setTimezone: (timezone: string) => any,
    setVariable: (name: string, value: string) => any,
    sgn: (number: numeric) => any,
    sin: (number: numeric) => any,
    sizeOf: (obj: any, complex?: boolean) => any,
    sleep: (duration: any) => any,
    soundEx: (str: string) => any,
    spanExcluding: (string: string, set: string) => any,
    spanIncluding: (string: string, set: string) => any,
    spreadsheetAddAutoFilter: (spreadsheetObj: any, autofilter: string) => any,
    spreadsheetAddColumn: (spreadsheetObj: any, data: string, startrow: numeric, startcolumn: numeric, insert: boolean, insert?: boolean) => any,
    spreadsheetAddFreezePane: (spreadsheetObj: any, freezeColumn: numeric, freezeRow: numeric, hideColumn?: numeric, hideRow?: numeric) => any,
    spreadsheetAddimage: (spreadsheetObj: any, imagefilepath: string, anchor: string) => any,
    spreadsheetAddInfo: (spreadsheetObj: any, info: {}) => any,
    spreadsheetAddPagebreaks: (SpreadsheetObj: any, rowbreaks: string, colbreaks: string) => any,
    spreadsheetAddRow: (spreadsheetObj: any, data: string, row?: numeric, column?: numeric, insert?: boolean, datatype?: any[]) => any,
    spreadsheetAddRows: (spreadsheetObj: any, data: any, row?: numeric, column?: numeric, insert?: boolean, datatype?: any[], includeColumnNames?: boolean) => any,
    spreadsheetAddSplitPane: (spreadsheetObj: any, x: numeric, y: numeric, splitColumn: numeric, splitRow: numeric, position?: string) => any,
    spreadsheetCreateSheet: (spreadsheetObj: any, name: string) => any,
    spreadsheetDeleteColumn: (spreadsheetObj: any, column: numeric) => any,
    spreadsheetDeleteColumns: (spreadsheetObj: any, range: numeric) => any,
    spreadsheetDeleteRow: (spreadsheetObj: any, row: numeric) => any,
    spreadsheetDeleteRows: (spreadsheetObj: any, range: numeric) => any,
    spreadsheetFormatCell: (spreadsheetObj: any, format: {}, row: numeric, column: numeric) => any,
    spreadsheetFormatCellRange: (spreadsheetObj: any, format: {}, startRow: numeric, startColumn: numeric, endRow: numeric, endColumn: numeric) => any,
    spreadsheetFormatColumn: (spreadsheetObj: any, format: {}, column: numeric) => any,
    spreadsheetFormatColumns: (spreadsheetObj: any, format: string, columns: string) => any,
    spreadsheetFormatRow: (spreadsheetObj: any, format: {}, row: numeric) => any,
    spreadsheetFormatRows: (spreadsheetObj: any, format: {}, rows: string) => any,
    spreadsheetGetCellComment: (author: string, column?: numeric, comment?: string, row?: string) => any,
    spreadsheetGetCellFormula: (spreadsheetObj: any, row: numeric, column: numeric) => any,
    spreadsheetGetCellValue: (spreadsheetObj: any, row: string, column: string) => any,
    spreadsheetGetColumnCount: (spreadsheetObj: any, sheet?: string) => any,
    spreadsheetInfo: (spreadsheetObj: any) => any,
    spreadsheetMergeCells: (spreadsheetObj: any, startrow: numeric, endrow: numeric, startcolumn: numeric, endcolumn: numeric) => any,
    spreadsheetNew: (sheetname?: string, xmlFormat?: boolean) => any,
    spreadsheetRead: (fileName: string, spreadsheetObj: any) => any,
    spreadsheetReadBinary: (spreadsheetObj: any) => any,
    spreadsheetRemoveSheet: (spreadsheetObj: any, sheetname: any) => any,
    spreadsheetSetActiveSheet: (spreadsheetObj: any, name?: string) => any,
    spreadsheetSetActiveSheetNumber: (spreadsheetObj: any, number?: numeric) => any,
    spreadsheetSetCellComment: (spreadsheetObj: any, comment: string, row: numeric, column: numeric) => any,
    spreadsheetSetCellFormula: (spreadsheetObj: any, formula: string, row: numeric, column: numeric) => any,
    spreadsheetSetCellValue: (spreadsheetObj: any, value: string, row: numeric, column: numeric) => any,
    spreadsheetSetColumnWidth: (spreadsheetObj: any, columnNumber: numeric, width: numeric) => any,
    spreadsheetSetFooter: (spreadsheetObj: any, leftFooter: string, centerFooter: string, rightFooter: string) => any,
    spreadsheetSetHeader: (spreadsheetObj: any, leftHeader: string, centerHeader: string, rightHeader: string) => any,
    spreadsheetSetRowHeight: (spreadsheetObj: any, rowNumber: numeric, height: numeric) => any,
    spreadsheetShiftColumns: (spreadsheetObj: any, start: numeric, end?: numeric, start?: numeric) => any,
    spreadsheetShiftRows: (spreadsheetObj: any, start: numeric, end: numeric, rows?: numeric) => any,
    spreadsheetwrite: (spreadsheetObj: any, fileName: string, password?: string, overwrite?: boolean) => any,
    sqr: (number: numeric) => any,
    sslCertificateInstall: (host: string, port?: numeric) => any,
    sslCertificateList: (host: string, port?: numeric) => any,
    storeAddACL: (url: any, ACLobject: any) => any,
    storeGetACL: (ulr: any, ACLobject: any) => any,
    storeGetMetadata: (url: any) => any,
    storeSetACL: (url: any, ACLobject: any) => any,
    storeSetMetadata: (url: any, region: any) => any,
    stringLen: (string: string) => any,
    stripCR: (string: string) => any,
    structAppend: (destStruct: {}, sourceStruct: {}, overwriteFlag?: boolean) => any,
    structClear: (structure: {}) => any,
    structCopy: (structure: {}) => any,
    structCount: (structure: {}) => any,
    structDelete: (structure: string, key: string, indicateNotExisting?: boolean) => any,
    structEach: (struct: string, callback: any, parallel?: boolean, maxThreads?: numeric) => any,
    structEquals: (struct1: {}, struct2: {}) => any,
    structEvery: (struct: {}, closure: any, parallel?: boolean, maxThreads?: numeric) => any,
    structFilter: (struct: {}, callback: boolean, parallel?: boolean, maxThreads?: numeric) => any,
    structFind: (structure: {}, key: string, defaultValue?: any) => any,
    structFindKey: (top: any, value: string, scope: string) => any,
    structFindValue: (top: any, value: string, scope?: string) => any,
    structGet: (path: string) => any,
    structGetMetadata: (struct: {}) => any,
    structInsert: (structure: {}, key: string, value: any, allowoverwrite?: boolean) => any,
    structIsEmpty: (structure: {}) => any,
    structIsOrdered: (struct: {}) => any,
    structKeyArray: (structure: {}) => any,
    structKeyExists: (structure: {}, key: string) => any,
    structKeyList: (structure: {}, delimiter?: string) => any,
    structKeyTranslate: (structure: {}, deepTranslation?: boolean, leaveOriginalKey?: boolean) => any,
    structListNew: (maxsize: numeric) => any,
    structMap: (struct: {}, callback: any, parallel?: boolean, maxThreads?: numeric) => any,
    structNew: (structType?: string) => any,
    structReduce: (struct: {}, callback: any, initialVal: any) => any,
    structSetMetadata: (inputStruct: {}, metaStruct: {}) => any,
    structSome: (struct: {}, callback: boolean, parallel?: boolean, maxThreads?: numeric) => any,
    structSort: (base: {}, sorttype?: string, sortorder?: string, pathtosubelement?: string, localeSensitive?: boolean, callback?: any) => any,
    structToSorted: (structure: {}, callback?: any, sorttype?: string, sortorder?: string, localeSensitive?: boolean) => any,
    structUpdate: (structure: {}, key: string, value: any) => any,
    structValueArray: (structure: {}) => any,
    systemCacheClear: (cacheName?: string) => any,
    systemOutput: (obj: any, addNewLine?: boolean, doErrorStream?: boolean) => any,
    tan: (number: numeric) => any,
    threadJoin: (threadName?: string, timeout?: numeric) => any,
    threadTerminate: (threadname: string) => any,
    throw: (message?: string, type?: string, detail?: string, errorcode?: string, extendedinfo?: string, object?: any) => never,
    timeFormat: (time: any, mask?: string) => any,
    toBase64: (string_or_object: any, encoding?: string) => any,
    toBinary: (base64_or_object: any) => any,
    toNumeric: (value: any, radix?: any) => any,
    toScript: (cfvar: any, javascriptvar: string, outputformat?: boolean, asformat?: boolean) => any,
    toString: (any_value: any, encoding?: string) => any,
    trace: (var?: string, text?: string, type?: string, category?: string, inline?: boolean, abort?: boolean) => any,
    transactionCommit: () => any,
    transactionRollback: (savepoint?: string) => any,
    transactionSetSavepoint: (savepoint: string) => any,
    trim: (string: string) => any,
    trueFalseFormat: (value: boolean) => any,
    uCase: (string: string) => any,
    ucFirst: (string: string, doAll?: boolean, doLowerIfAllUppercase?: boolean) => any,
    unserializeJava: (string: string) => any,
    urlDecode: (urlencodedstring: string, charset?: string) => any,
    urlEncode: (string: string, charset?: string, force?: boolean) => any,
    urlEncodedFormat: (string: string, charset?: string) => any,
    urlSessionFormat: (requesturl: string) => any,
    val: (string: string) => any,
    valueArray: (query: any, column: string) => any,
    valueList: (column: any, delimiter?: string) => any,
    verifyClient: () => any,
    webserviceNew: (url: string, arguments?: {}) => any,
    week: (date: any) => any,
    wrap: (string: string, limit: numeric, strip?: boolean) => any,
    writeBody: () => any,
    writeDump: (var: string, output?: string, format?: string, abort?: boolean, label?: string, metainfo?: boolean, top?: numeric, show?: string, hide?: string, keys?: numeric, expand?: boolean, showUDfs?: boolean) => any,
    writeLog: (text: string, type?: string, application?: boolean, file?: string, log?: string) => any,
    writeOutput: (string: string, encodeFor?: string) => any,
    wsGetAllChannels: (channelName?: any) => any,
    wsGetSubscribers: (channel: any) => any,
    wsPublish: (channel: any, message: any, filterCriteria?: any) => any,
    wsSendMessage: (message: any) => any,
    xmlChildPos: (elem: any, childname: string, n: numeric) => any,
    xmlElemNew: (xmlobj: any, namespace?: string, childname: string) => any,
    xmlFormat: (string: string, escapeChars?: boolean) => any,
    xmlGetNodeType: (xmlNode: any) => any,
    xmlNew: (casesensitive?: boolean) => any,
    xmlParse: (xmlstring: string, caseSensitive?: boolean, validator?: string) => any,
    xmlSearch: (xmlNode: any, xpath: string, params?: {}) => any,
    xmlTransform: (xml: any, xsl: string, parameters?: {}) => any,
    xmlValidate: (xmlDoc: any, validator?: string) => any,
    year: (date: any) => any,
    yesNoFormat: (value: any) => any,
}

@!interface Array<T> {
    append: (value: T, merge?: boolean) => T[],
    avg: () => numeric,
    clear: () => T[],
    contains: (value: T) => boolean,
    containsNoCase: (value: T) => boolean,
    delete: (value: T) => T[],
    deleteAt: (index: numeric) => T[],
    deleteNoCase: (value: T) => T[],
    each: (callback: (e: T, i?: numeric, a?: T[]) => any, parallel?: boolean, maxThreads?: numeric) => void,
    every: (callback: (e: T, i?: numeric, a?: T[]) => any, parallel?: boolean, maxThreads?: numeric) => boolean,
    filter:	(callback: (e: T, i?: numeric, a?: T[]) => boolean, parallel?: boolean, maxThreads?: numeric) => T[],

<!---
    find: (cb: (e: T, i?: numeric, a?: T[]) => boolean) => numeric,
    find: (value: T) => numeric,
    find: (v: T | ((e: T, i?: numeric, a?: T[]) => boolean)) => numeric,
--->
    
<!---
    ArrayFind	someVar.find()
    ArrayFindAll	someVar.findAll()
    ArrayFindAllNoCase	someVar.findAllNoCase()
    ArrayFindNoCase	someVar.findNoCase()
--->
    first: () => T | null,
<!---
    ArrayGetMetaData	someVar.getMetaData()
    ArrayInsertAt	someVar.insertAt()
    ArrayIsDefined	someVar.isDefined()
--->
    isEmpty: () => boolean,
    last: () => T | null,
    len: () => numeric,
    map: <U>(callback: (e: T, i?: numeric, a?: T[]) => U, parallel?: boolean, maxThreads?: boolean) => U[]
<!---
    ArrayMax	someVar.max()
    ArrayMin	someVar.min()
    ArrayPrepend	someVar.prepend()
    ArrayReduceRight	someVar.reduceRight()
    ArrayResize	someVar.resize()
    ArraySet	someVar.set()
    ArraySlice	someVar.slice()
    ArraySort	someVar.sort()
    ArraySplice	someVar.splice()
    ArraySome	someVar.some()
    ArraySum	someVar.sum()
    ArraySwap	someVar.swap()
    ArrayToList	someVar.toList()
    ArrayReduce	someVar.reduce()
--->
}
/**
 * description of abs
 * further description of abs
 * @always-visible
 * @x-returns number[]
 * @returntype array
 */
@declare function abs(required numeric number);

<!---
@declare function acos(required number: any) : any;
@declare function addSOAPRequestHeader(required webservice: any, required namespace: any, required name: any, required value: any, mustUnderstand: any) : any;
@declare function addSOAPResponseHeader(required namespace: any, required name: any, required value: any, mustUnderstand: any) : any;
@declare function ajaxLink(required url: any) : any;
@declare function ajaxOnLoad(required functionName: any) : any;
@declare function applicationStartTime() : any;
@declare function applicationStop() : any;
@declare function array(values: any) : any;
@declare function arrayAppend(required array: any, required value: any, merge: any) : any;
@declare function arrayAvg(required array: any) : any;
@declare function arrayClear(required array: any) : any;
@declare function arrayContains(required array: any, required value: any, substringMatch: any) : any;
@declare function arrayContainsNoCase(required array: any, required value: any) : any;
@declare function arrayDelete(required array: any, required value: any, scope: any) : any;
@declare function arrayDeleteAt(required array: any, required index: any) : any;
@declare function arrayDeleteNoCase(required array: any, required value: any) : any;
@declare function arrayEach(required array: any, required callback: any, parallel: any, maxThreads: any) : any;
@declare function arrayEvery(required array: any, required closure: any, parallel: any, maxThreads: any) : any;
@declare function arrayFilter(required array: any, required callback: any, parallel: any, maxThreads: any) : any;
@declare function arrayFind(required array: any, required value: any) : any;
@declare function arrayFindAll(required array: any, valueOrCallback: any) : any;
@declare function arrayFindAllNoCase(required array: any, required valueOrCallback: any) : any;
@declare function arrayFindNoCase(required array: any, required valueOrCallback: any) : any;
@declare function arrayFirst(required array: any) : any;
@declare function arrayGetMetadata(required array: any) : any;
@declare function arrayIndexExists(required array: any, required index: any) : any;
@declare function arrayInsertAt(required array: any, required position: any, required value: any) : any;
@declare function arrayIsDefined(required array: any, required index: any) : any;
@declare function arrayIsEmpty(required array: any) : any;
@declare function arrayLast(required array: any) : any;
@declare function arrayLen(required array: any) : any;
@declare function arrayMap(required array: any, required callback: any, parallel: any, maxThreads: any) : any;
@declare function arrayMax(required array: any) : any;
@declare function arrayMedian(required array: any) : any;
@declare function arrayMerge(required array1: any, required array2: any, leaveIndex: any) : any;
@declare function arrayMid(required array: any, required start: any, count: any) : any;
@declare function arrayMin(required array: any) : any;
@declare function arrayNew(required dimension: any, isSynchronized: any) : any;
@declare function arrayPrepend(required array: any, required value: any) : any;
@declare function arrayReduce(required array: any, required callback: any, initialValue: any) : any;
@declare function arrayResize(required array: any, required size: any) : any;
@declare function arrayReverse(required array: any) : any;
@declare function arraySet(required array: any, required start: any, required end: any, required value: any) : any;
@declare function arraySetMetadata(required array: any, required metadata: any) : any;
@declare function arrayShift(required array: any) : any;
@declare function arraySlice(required array: any, required offset: any, length: any) : any;
@declare function arraySome(required array: any, required callback: any, parallel: any, maxThreads: any) : any;
@declare function arraySort(required array: any, required sortType: any, sortOrder: any, callback: any) : any;
@declare function arraySplice(required array: any, required index: any, elementCountForRemoval: any, replacements: any) : any;
@declare function arraySum(required array: any, ignoreEmpty: any) : any;
@declare function arraySwap(required array: any, required position1: any, required position2: any) : any;
@declare function arrayToList(required array: any, delimiter: any) : any;
@declare function arrayToStruct(required array: any) : any;
@declare function asc(required string: any) : any;
@declare function asin(required number: any) : any;
@declare function atn(required number: any) : any;
@declare function beat(time: any) : any;
@declare function binaryDecode(required string: any, required encoding: any) : any;
@declare function binaryEncode(required binaryData: any, required encoding: any) : any;
@declare function bitAnd(required number1: any, required number2: any) : any;
@declare function bitMaskClear(required number: any, required start: any, required length: any) : any;
@declare function bitMaskRead(required number: any, required start: any, required length: any) : any;
@declare function bitMaskSet(required number: any, required mask: any, required start: any, required length: any) : any;
@declare function bitNot(required number: any) : any;
@declare function bitOr(required number1: any, required number2: any) : any;
@declare function bitShln(required number: any, required count: any) : any;
@declare function bitShrn(required number: any, required count: any) : any;
@declare function bitXor(required number1: any, required number2: any) : any;
@declare function booleanFormat(required value: any) : any;
@declare function bundleInfo(required obj: any) : any;
@declare function cacheClear(filterOrTags: any, cacheName: any) : any;
@declare function cacheCount(cacheName: any) : any;
@declare function cacheDelete(required id: any, throwOnError: any, cacheName: any) : any;
@declare function cacheGet(required id: any, region: any, cacheName: any, throwWhenNotExist: any) : any;
@declare function cacheGetAll(filter: any, cacheName: any) : any;
@declare function cacheGetAllIds() : any;
@declare function cacheGetDefaultCacheName(required type: any) : any;
@declare function cacheGetEngineProperties() : any;
@declare function cacheGetMetadata(required id: any, objectType: any, region: any) : any;
@declare function cacheGetProperties(region: any) : any;
@declare function cacheGetSession(required objectType: any, isKey: any) : any;
@declare function cacheIdExists(required id: any, region: any) : any;
@declare function cacheKeyExists(required key: any, cacheName: any) : any;
@declare function cachePut(required id: any, required value: any, timespan: any, idleTime: any, region: any, throwOnError: any) : any;
@declare function cacheRegionExists(required region: any, password : any) : any;
@declare function cacheRegionNew(required region: any, properties: any, throwOnError: any, password : any) : any;
@declare function cacheRegionRemove(required region: any, password : any) : any;
@declare function cacheRemove(required id: any, throwOnError: any, region: any, exact: any) : any;
@declare function cacheRemoveAll(region: any) : any;
@declare function cacheSetProperties(required properties: any, region: any) : any;
@declare function callStackDump(output: any) : any;
@declare function callStackGet() : any;
@declare function canonicalize(required input: any, required restrictMultiple: any, required restrictMixed: any, throwOnError: any) : any;
@declare function ceiling(required number: any) : any;
@declare function cfusion_Decrypt(required string: any, required key: any) : any;
@declare function cfusion_Encrypt(required string: any, required key: any) : any;
@declare function charsetDecode(required string: any, required encoding: any) : any;
@declare function charsetEncode(required binaryData: any, required encoding: any) : any;
@declare function chr(required number: any) : any;
@declare function cJustify(required string: any, required length: any) : any;
@declare function collectionEach(required collection: any, required closure: any) : any;
@declare function collectionEvery(required collection: any, required closure: any, parallel: any, maxThreads: any) : any;
@declare function collectionFilter(required collection: any, required filter: any, parallel: any, maxThreads: any) : any;
@declare function collectionMap(required collection: any, required closure: any, parallel: any, maxThreads: any) : any;
@declare function collectionReduce(required collection: any, required closure: any, initalValue: any) : any;
@declare function collectionSome(required collection: any, required closure: any, parallel: any, maxThreads: any) : any;
@declare function compare(required string1: any, required string2: any) : any;
@declare function compareNoCase(required string1: any, required string2: any) : any;
@declare function componentCacheClear() : any;
@declare function componentCacheList() : any;
@declare function componentInfo(required component: any) : any;
@declare function compress(required format: any, required source: any, required target: any, includeBaseFolder: any, mode: any) : any;
@declare function contractPath(required path_absolute: any, placeholder: any) : any;
@declare function cos(required number: any) : any;
@declare function createDate(required year: any, required month: any, required day: any) : any;
@declare function createDateTime(required year: any, required month: any, required day: any, required hour: any, required minute: any, required second: any, millisecond: any, timezone: any) : any;
@declare function createDynamicProxy(required cfc: any, required interfaces: any) : any;
@declare function createGUID() : any;

@declare function createObject(
    type: any,
    className: any,
    context: any,
    locale: any,
    servername: any,
    component_name: any,
    urltowsdl: any,
    portname: any,
    bundleName: any,
    bundleVersion: any) : any;

@declare function createODBCDate(required date: any) : any;
@declare function createODBCDateTime(required date: any) : any;
@declare function createODBCTime(required date: any) : any;
@declare function createTime(required hour: any, required minute: any, required second: any, millisecond: any, timezone: any) : any;
@declare function createTimespan(required days: any, required hours: any, required minutes: any, required seconds: any) : any;
@declare function createUniqueID() : any;
@declare function createUUID() : any;
@declare function csrfGenerateToken(key: any, forceNew: any) : any;
@declare function csrfVerifyToken(required token: any, key: any) : any;
@declare function ctCacheClear() : any;
@declare function ctCacheList() : any;
@declare function datasourceFlushMetacache(datasourceName: any) : any;
@declare function dateAdd(required datepart: any, required number: any, required date: any) : any;
@declare function dateCompare(required date1: any, required date2: any, datePart: any) : any;
@declare function dateConvert(required conversionType: any, required date: any) : any;
@declare function dateDiff(required datepart: any, required date1: any, required date2: any) : any;
@declare function dateFormat(required date: any, mask: any) : any;
@declare function datePart(required datepart: any, required date: any, timezone: any) : any;
@declare function dateTimeFormat(required date: any, mask: any, timezone: any) : any;
@declare function day(required date: any) : any;
@declare function dayOfWeek(required date: any, calendar: any) : any;
@declare function dayOfWeekAsString(required dayOfWeek: any, locale: any) : any;
@declare function dayOfWeekShortAsString(required day_of_week: any, locale: any) : any;
@declare function dayOfYear(required date: any) : any;
@declare function daysInMonth(required date: any) : any;
@declare function daysInYear(required date: any) : any;
@declare function de(required String: any) : any;
@declare function decimalFormat(required number: any) : any;
@declare function decodeForHTML(required string: any) : any;
@declare function decodeFromURL(required string: any) : any;
@declare function decrementValue(required number: any) : any;
@declare function decrypt(required string: any, required key: any, algorithm: any, encoding: any, iv: any, salt: any, iterations: any) : any;
@declare function decryptBinary(required binaryData: any, required key: any, algorithm: any, encoding: any, iv: any, salt: any, iterations: any) : any;
@declare function deleteClientVariable(required name: any) : any;
@declare function deserialize(required string: any, required type: any, required useCustomSerializer: any) : any;
@declare function deserializeJSON(required json: any, strictMapping: any, useCustomSerializer: any) : any;
@declare function deserializeXML(required string: any, required useCustomSerializer: any) : any;
@declare function directoryCopy(required source: any, required destination: any, recurse: any, filter: any, createPath: any) : any;
@declare function directoryCreate(required path: any, createPath: any, ignoreExists: any) : any;
@declare function directoryDelete(required path: any, recurse: any) : any;
@declare function directoryExists(required path: any, allowRealPath : any) : any;
@declare function directoryList(required path: any, recurse: any, listInfo: any, filter: any, sort: any, type: any) : any;
@declare function directoryRename(required oldPath: any, required newPath: any, createPath: any) : any;
@declare function dollarFormat(required number: any) : any;
@declare function dotnetToCFType(required variableName: any) : any;
@declare function duplicate(required object: any, deepcopy: any) : any;
@declare function each(required collection: any, required closure: any, parallel: any, maxThreads: any) : any;
@declare function echo(required string: any) : any;
@declare function empty(required variable: any) : any;
@declare function encodeFor(required type: any, required value: any) : any;
@declare function encodeForCSS(required string: any, canonicalize: any) : any;
@declare function encodeForDN(required string: any, canonicalize: any) : any;
@declare function encodeForHTML(required string: any, canonicalize: any) : any;
@declare function encodeForHTMLAttribute(required string: any, canonicalize: any) : any;
@declare function encodeForJavaScript(required string: any, canonicalize: any, canonicalize: any) : any;
@declare function encodeForLDAP(required string: any, canonicalize: any) : any;
@declare function encodeForURL(required string: any, canonicalize: any) : any;
@declare function encodeForXML(required string: any, canonicalize: any) : any;
@declare function encodeForXMLAttribute(required string: any, canonicalize: any) : any;
@declare function encodeForXPath(required string: any, canonicalize: any) : any;
@declare function encrypt(required string: any, required key: any, algorithm: any, encoding: any, iv: any, salt: any, iterations: any) : any;
@declare function encryptBinary(required binaryData: any, required key: any, algorithm: any, iv: any, salt: any, iterations: any) : any;
@declare function entityDelete(required entity: any) : any;
@declare function entityLoad(required entityName: any, id: any, Filter: any, unique: any, Order: any, options: any) : any;
@declare function entityLoadByExample(required sampleEntity: any, unique: any, matchCriteria: any) : any;
@declare function entityLoadByPK(required entity: any, required id: any, unique: any) : any;
@declare function entityMerge(required entity: any) : any;
@declare function entityNameArray() : any;
@declare function entityNameList(delimiter: any) : any;
@declare function entityNew(required entityName: any, properties: any, ignoreExtras: any) : any;
@declare function entityReload(required entity: any) : any;
@declare function entitySave(required entity: any, forceInsert: any) : any;
@declare function entityToQuery(required entity: any, name: any) : any;
@declare function esapiDecode(required decodeFrom: any, required string: any) : any;
@declare function esapiEncode(required encodeFor: any, required string: any) : any;
@declare function evaluate(required expression: any) : any;
@declare function exp(required number: any) : any;
@declare function expandPath(required path: any) : any;
@declare function extract(required format: any, required source: any, required target: any) : any;
@declare function fileAppend(required file: any, required data: any, charset: any, addNewLine: any) : any;
@declare function fileClose(required file: any) : any;
@declare function fileCopy(required source: any, required destination: any) : any;
@declare function fileDelete(required filePath: any) : any;
@declare function fileExists(required filePath: any) : any;
@declare function fileGetMimeType(required file: any, strict: any) : any;
@declare function fileIsEOF(required file: any) : any;
@declare function fileMove(required source: any, required destination: any) : any;
@declare function fileOpen(required filePath: any, mode: any, charset: any, seekable: any) : any;
@declare function fileRead(required filePath: any, charset: any, bufferSize: any) : any;
@declare function fileReadBinary(required filePath: any) : any;
@declare function fileReadLine(required file: any) : any;
@declare function fileSeek(required file: any, required position: any) : any;
@declare function fileSetAccessMode(required filePath: any, required mode: any) : any;
@declare function fileSetAttribute(required filePath: any, required attribute: any) : any;
@declare function fileSetLastModified(required filePath: any, required date: any) : any;
@declare function fileSkipBytes(required file: any, required skipCount: any) : any;
@declare function fileUpload(required destination: any, fileField: any, mimeType: any, onConflict: any, strict: any) : any;
@declare function fileUploadAll(required destination: any, mimeType: any, onConflict: any, strict: any, continueOnError: any, errorVariable: any, allowedExtensions: any) : any;
@declare function fileWrite(required filePath: any, required data: any, charset: any) : any;
@declare function fileWriteLine(required file: any, required data: any) : any;
@declare function find(required substring: any, required string: any, start: any) : any;
@declare function findNoCase(required substring: any, required string: any, start: any) : any;
@declare function findOneOf(required set: any, required string: any, start: any) : any;
@declare function firstDayOfMonth(required date: any) : any;
@declare function fix(required number: any) : any;
@declare function floor(required number: any) : any;
@declare function formatBaseN(required number: any, required radix: any) : any;
@declare function generatePBKDFKey(required algorithm: any, required passphrase: any, required salt: any, required iterations: any, required keySize: any) : any;
@declare function generateSecretKey(algorithm: any, keysize: any) : any;
@declare function getApplicationMetadata() : any;
@declare function getApplicationSettings(required suppressFunction: any) : any;
@declare function getAuthUser() : any;
@declare function getBaseTagData(required tagname: any, level: any) : any;
@declare function getBaseTagList(caller: any) : any;
@declare function getBaseTemplatePath() : any;
@declare function getBuiltinFunction(required name: any) : any;
@declare function getCanonicalPath(required path: any) : any;
@declare function getClassPath() : any;
@declare function getClientVariablesList() : any;
@declare function getComponentMetadata(required path: any) : any;
@declare function getContextRoot() : any;
@declare function getCpuUsage(interval: any) : any;
@declare function getCurrentContext() : any;
@declare function getCurrentTemplatePath() : any;
@declare function getDirectoryFromPath(required path: any) : any;
@declare function getEncoding(required scope_name: any) : any;
@declare function getException(required javaobject: any) : any;
@declare function getFileFromPath(required path: any) : any;
@declare function getFileInfo(required path: any) : any;
@declare function getFreeSpace(required path: any) : any;
@declare function getFunctionCalledName() : any;
@declare function getFunctionData(required functionName: any, dialect: any) : any;
@declare function getFunctionKeywords() : any;
@declare function getFunctionList() : any;
@declare function getGatewayHelper(required gatewayID: any) : any;
@declare function getHTTPRequestData(required includeBody: any) : any;
@declare function getHTTPTimeString(DateTime: any) : any;
@declare function getK2ServerDocCount() : any;
@declare function getK2ServerDocCountLimit() : any;
@declare function getLocale() : any;
@declare function getLocaleCountry() : any;
@declare function getLocaleDisplayName() : any;
@declare function getLocaleInfo(locale: any, dspLocale: any) : any;
@declare function getLocaleLanguage() : any;
@declare function getLocalhostIP() : any;
@declare function getLuceeID() : any;
@declare function getMemoryUsage(type: any) : any;
@declare function getMetadata(required Object: any) : any;
@declare function getMetricData(required mode: any) : any;
@declare function getNumericDate(required arg1: any) : any;
@declare function getPageContext() : any;
@declare function getPrinterInfo(printer: any) : any;
@declare function getPrinterList(delimiter: any) : any;
@declare function getProfileSections(required inifile: any) : any;
@declare function getProfileString(required inipath: any, required section: any, required entry: any) : any;
@declare function getReadableImageFormats() : any;
@declare function getSafeHTML(required inputString: any, required PolicyFile: any, required throwOnError: any) : any;
@declare function getSOAPRequest(webservice: any) : any;
@declare function getSOAPRequestHeader(required namespace: any, required name: any, asXML: any) : any;
@declare function getSOAPResponse(required webservice: any) : any;
@declare function getSOAPResponseHeader(required webservice: any, required namespace: any, required name: any, asXML: any) : any;
@declare function getSystemFreeMemory() : any;
@declare function getSystemTotalMemory(region: any) : any;
@declare function getTagData(required nameSpaceWithSeperator: any, required tagName: any, dialect: any) : any;
@declare function getTagList() : any;
@declare function getTempDirectory() : any;
@declare function getTempFile(required dir: any, required prefix: any) : any;
@declare function getTemplatePath() : any;
@declare function getTickCount() : any;
@declare function getTimezone() : any;
@declare function getTimezoneInfo(required timezone: any, required locale: any) : any;
@declare function getToken(required String: any, required index: any, delimiters: any) : any;
@declare function getTotalSpace(required path: any) : any;
@declare function getUserRoles() : any;
@declare function getVariable(required name: any) : any;
@declare function getVFSMetadata(required fileSystemType: any) : any;
@declare function getWriteableImageFormats() : any;
@declare function hash(required string: any, algorithm: any, encoding: any, additionalIterations: any) : any;
@declare function hash40(required input: any, algorithm: any, encoding: any, numIterations: any) : any;
@declare function hmac(required message: any, required key: any, algorithm: any, encoding: any) : any;
@declare function hour(required date: any) : any;
@declare function htmlCodeFormat(required string: any, version: any) : any;
@declare function htmlEditFormat(required string: any, version: any) : any;
@declare function htmlParse(required html: any, caseSensitive: any) : any;
@declare function iIf(required condition: any, required expression1: any, required expression2: any) : any;
@declare function imageAddBorder(required name: any, required thickness: any, color: any, bordertype: any) : any;
@declare function imageBlur(required name: any, blurradius: any) : any;
@declare function imageClearRect(required name: any, required x: any, required y: any, required width: any, required height: any) : any;
@declare function imageCopy(required name: any, required x: any, required y: any, required width: any, required height: any, dx: any, dy: any) : any;
@declare function imageCreateCaptcha(required height: any, required width: any, required text: any, difficulty: any, font: any, fontsize: any) : any;
@declare function imageCrop(required name: any, required x: any, required y: any, required width: any, required height: any) : any;
@declare function imageDrawArc(required name: any, required x: any, required y: any, required width: any, required height: any, required startAngle: any, required archAngle: any, filled: any) : any;
@declare function imageDrawBeveledRect(required name: any, required x: any, required y: any, required width: any, required height: any, required raised: any, filled: any) : any;
@declare function imageDrawCubicCurve(required name: any, required ctrlx1: any, required ctrly1: any, required ctrlx2: any, required ctrly2: any, required x1: any, required y1: any, required x2: any, required y2: any) : any;
@declare function imageDrawImage(required name: any, required image: any, required x: any, required y: any) : any;
@declare function imageDrawLine(required name: any, required x1: any, required y1: any, required x2: any, required y2: any) : any;
@declare function imageDrawLines(required name: any, required xcords: any, required ycords: any, isPolygon: any, filled: any) : any;
@declare function imageDrawOval(required name: any, required x: any, required y: any, required width: any, required height: any, filled: any) : any;
@declare function imageDrawPoint(required name: any, required x: any, required y: any) : any;
@declare function imageDrawQuadraticCurve(required name: any, required x1: any, required y1: any, required ctrlx1: any, required ctrly1: any, required x2: any, required y2: any) : any;
@declare function imageDrawRect(required name: any, required x: any, required y: any, required width: any, required height: any, filled: any) : any;
@declare function imageDrawRoundRect(required name: any, required x: any, required y: any, required width: any, required height: any, required arcwidth: any, required archeight: any, filled: any) : any;
@declare function imageDrawText(required name: any, required str: any, required x: any, required y: any, attributecollection: any) : any;
@declare function imageFilter(required name: any, required filtername: any, parameters: any) : any;
@declare function imageFilterColorMap(required type: any, lineColor1: any, lineColor2: any) : any;
@declare function imageFilterCurves() : any;
@declare function imageFilterKernel(required width: any, required height: any, required data: any) : any;
@declare function imageFilterWarpGrid(required rows: any, required cols: any, required width: any, required height: any) : any;
@declare function imageFlip(required name: any, required transpose: any) : any;
@declare function imageFonts() : any;
@declare function imageFormats() : any;
@declare function imageGetBlob(required source: any) : any;
@declare function imageGetBufferedImage(required name: any) : any;
@declare function imageGetExifMetaData(required name: any) : any;
@declare function imageGetEXIFTag(required name: any, required tagName: any) : any;
@declare function imageGetHeight(required name: any) : any;
@declare function imageGetIPTCMetaData(required name: any) : any;
@declare function imageGetIPTCtag(required name: any, required tagName: any) : any;
@declare function imageGetMetadata(required name: any) : any;
@declare function imageGetWidth(required name: any) : any;
@declare function imageGrayScale(required name: any) : any;
@declare function imageInfo(required name: any) : any;
@declare function imageMakeColorTransparent(required img: any, required color: any) : any;
@declare function imageMakeTranslucent(required img: any, required percentage: any) : any;
@declare function imageNegative(required name: any) : any;
@declare function imageNew(source: any, width: any, height: any, imagetype: any, canvascolor: any) : any;
@declare function imageOverlay(required source1: any, required source2: any, rule: any, alpha: any) : any;
@declare function imagePaste(required image1: any, required image2: any, required x: any, required y: any) : any;
@declare function imageRead(required path: any) : any;
@declare function imageReadBase64(required string: any) : any;
@declare function imageResize(required name: any, required width: any, required height: any, interpolation: any, blurfactor: any) : any;
@declare function imageRotate(required name: any, required angle: any, x: any, y: any, interpolation: any) : any;
@declare function imageRotateDrawingAxis(required name: any, required angle: any, x: any, y: any) : any;
@declare function imageScaleTofit(required name: any, required fitWidth: any, required fitHeight: any, interpolation: any, blurfactor: any) : any;
@declare function imageSetAntialiasing(required name: any, antialias: any) : any;
@declare function imageSetBackgroundColor(required name: any, required color: any) : any;
@declare function imageSetDrawingAlpha(required name: any, required alpha: any) : any;
@declare function imageSetDrawingColor(required name: any, required color: any) : any;
@declare function imageSetDrawingStroke(required name: any, attributecollection: any) : any;
@declare function imageSetDrawingTransparency(required name: any, required percent: any) : any;
@declare function imageSharpen(required name: any, gain: any) : any;
@declare function imageShear(required name: any, required shear: any, direction: any, interpolation: any) : any;
@declare function imageShearDrawingAxis(required name: any, required shrx: any, required shry: any) : any;
@declare function imageTranslate(required name: any, required xTrans: any, required yTrans: any, interpolation: any) : any;
@declare function imageTranslateDrawingAxis(required name: any, required x: any, required y: any) : any;
@declare function imageWrite(required name: any, destination: any, quality: any, overwrite: any) : any;
@declare function imageWriteBase64(required name: any, required destination: any, required format: any, inHTMLFormat: any, overwrite: any) : any;
@declare function imageXORDrawingMode(required name: any, required c1: any) : any;
@declare function incrementValue(required number: any) : any;
@declare function inputBaseN(required String: any, required radix: any) : any;
@declare function insert(required substring: any, required String: any, required position: any) : any;
@declare function int(required number: any) : any;
@declare function invalidateOauthAccesstoken(required token: any, required type: any) : any;
@declare function invoke(required instance: any, required methodname: any, arguments: any) : any;
@declare function isArray(required value: any, number: any) : any;
@declare function isBinary(required value: any) : any;
@declare function isBoolean(required value: any) : any;
@declare function isClosure(required object: any) : any;
@declare function isCustomFunction(required Object: any) : any;
@declare function isDate(required Object: any) : any;
@declare function isDDX(required path: any) : any;
@declare function isDebugMode() : any;
@declare function isDefined(required variable_name: any) : any;
@declare function isEmpty(required value: any) : any;
@declare function isFileObject(required object: any) : any;
@declare function isImage(required name: any) : any;
@declare function isImageFile(required path: any) : any;
@declare function isInstanceOf(required object: any, required typename: any) : any;
@declare function isIPInRange(required ips: any, required ip: any) : any;
@declare function isIPV6(required IP: any) : any;
@declare function isJSON(required var: any) : any;
@declare function isK2ServerABroker() : any;
@declare function isK2ServerDocCountExceeded() : any;
@declare function isK2ServerOnline() : any;
@declare function isLeapYear(required year: any) : any;
@declare function isLocalhost(required ipaddress: any) : any;
@declare function isNotMap(required obj: any) : any;
@declare function isNull(required object: any) : any;
@declare function isNumeric(required String: any) : any;
@declare function isNumericDate(required number: any) : any;
@declare function isObject(required value: any) : any;
@declare function isPDFArchive(required path: any, required standard: any) : any;
@declare function isPDFFile(required path: any) : any;
@declare function isPDFObject(required value: any) : any;
@declare function isQuery(required value: any) : any;
@declare function isSafeHTML(required inputString: any, PolicyFile: any) : any;
@declare function isSimpleValue(required value: any) : any;
@declare function isSOAPRequest() : any;
@declare function isSpreadsheetFile(required file: any) : any;
@declare function isSpreadsheetObject(required object: any) : any;
@declare function isStruct(required variable: any) : any;
@declare function isUserInAnyRole(required roleList: any) : any;
@declare function isUserInRole(required role_name: any) : any;
@declare function isUserLoggedIn() : any;
@declare function isValid(required type: any, required value: any, required min: any, required max: any, required pattern: any) : any;
@declare function isValidOauthAccesstoken(required token: any, required type: any) : any;
@declare function isVideoFile(required path: any) : any;
@declare function isWDDX(required value: any) : any;
@declare function isXML(required value: any) : any;
@declare function isXMLAttribute(required value: any) : any;
@declare function isXMLDoc(required value: any) : any;
@declare function isXMLElem(required value: any) : any;
@declare function isXMLNode(required value: any) : any;
@declare function isXMLRoot(required value: any) : any;
@declare function isZipFile(required path: any) : any;
@declare function javacast(required type: any, required variable: any) : any;
@declare function jsStringFormat(required String: any) : any;
@declare function lCase(required String: any) : any;
@declare function left(required String: any, required count: any) : any;
@declare function len(required Object: any) : any;
@declare function listAppend(required list: any, required value: any, delimiters: any, includeEmptyFields: any) : any;
@declare function listAvg(required list: any, delimiters: any, multiCharacterDelimiter: any) : any;
@declare function listChangeDelims(required list: any, required new_delimiter: any, delimiters: any, includeEmptyValues: any) : any;
@declare function listCompact(required list: any, delimiters: any, multiCharacterDelimiter: any) : any;
@declare function listContains(required list: any, required substring: any, delimiters: any) : any;
@declare function listContainsNoCase(required list: any, required substring: any, delimiters: any) : any;
@declare function listDeleteAt(required list: any, required position: any, delimiters: any) : any;
@declare function listEach(required str: any, required function: any, required delim: any, includeEmptyFields: any) : any;
@declare function listEvery(required list: any, required closure: any, delimiter: any, includeEmptyFields: any, multiCharacterDelimiter: any, parallel: any, maxThreads: any) : any;
@declare function listFilter(required list: any, required function: any) : any;
@declare function listFind(required list: any, required value: any, delimiters: any, includeEmptyValues: any) : any;
@declare function listFindNoCase(required list: any, required value: any, delimiters: any, includeEmptyValues: any) : any;
@declare function listFirst(required list: any, delimiters: any) : any;
@declare function listGetAt(required list: any, required position: any, delimiters: any, includeEmptyValues: any) : any;
@declare function listIndexExists(required list: any, required index: any, delimiter: any, includeEmptyFields: any) : any;
@declare function listInsertAt(required list: any, required position: any, required value: any, delimiters: any) : any;
@declare function listItemTrim(required list: any, delimiters: any, includeEmptyFields: any) : any;
@declare function listLast(required list: any, delimiters: any, includeEmptyValues: any) : any;
@declare function listLen(required list: any, delimiters: any, includeEmptyValues: any) : any;
@declare function listMap(required list: any, required function: any, intialValue: any, delimiter: any, includeEmptyFields: any) : any;
@declare function listPrepend(required list: any, required value: any, delimiters: any, includeEmptyFields: any) : any;
@declare function listQualify(required list: any, required qualifier: any, delimiters: any, elements: any, includeEmptyFields: any) : any;
@declare function listReduce(required list: any, required function: any, required intialValue: any, required delimiter: any, required includeEmptyFields: any) : any;
@declare function listRemoveDuplicates(required list: any, delimiter: any, ignoreCase: any) : any;
@declare function listRest(required list: any, delimiters: any) : any;
@declare function listSetAt(required list: any, required position: any, required value: any, delimiters: any) : any;
@declare function listSome(required list: any, required closure: any, delimiter: any, includeEmptyFields: any, multiCharacterDelimiter: any, parallel: any, maxThreads: any) : any;
@declare function listSort(required list: any, required sort_type: any, sort_order: any, delimiters: any) : any;
@declare function listToArray(required list: any, delimiters: any, includeEmptyFields: any, multiCharacterDelimiter: any) : any;
@declare function listTrim(required list: any, delimiters: any) : any;
@declare function listValueCount(required list: any, required value: any, delimiters: any) : any;
@declare function listValueCountNoCase(required list: any, required value: any, delimiters: any) : any;
@declare function lJustify(required String: any, required length: any) : any;
@declare function location(required url: any, addtoken: any, statuscode: any) : any;
@declare function log(required number: any) : any;
@declare function log10(required number: any) : any;
@declare function lsCurrencyFormat(required number: any, type: any) : any;
@declare function lsDateFormat(required date: any, mask: any, locale: any) : any;
@declare function lsDateTimeFormat(required date: any, mask: any, locale: any, timeZone: any) : any;
@declare function lsDayOfWeek(required date: any, locale: any, timezone: any) : any;
@declare function lsEuroCurrencyFormat(required currency: any, required type: any) : any;
@declare function lsIsCurrency(required String: any) : any;
@declare function lsIsDate(required String: any) : any;
@declare function lsIsNumeric(required String: any) : any;
@declare function lsNumberFormat(required number: any, mask: any) : any;
@declare function lsParseCurrency(required String: any) : any;
@declare function lsParseDateTime(required dt_string: any) : any;
@declare function lsParseEuroCurrency(required currency_string: any) : any;
@declare function lsParseNumber(required String: any, locale: any) : any;
@declare function lsTimeFormat(required time: any, mask: any) : any;
@declare function lsWeek(required date: any, locale: any, timezone: any) : any;
@declare function lTrim(required String: any) : any;
@declare function manifestRead(required path: any) : any;
@declare function max(required number1: any, required number2: any) : any;
@declare function metaphone(required str: any) : any;
@declare function mid(required String: any, required start: any, required count: any) : any;
@declare function millisecond(required date: any, timezone: any) : any;
@declare function min(required number1: any, required number2: any) : any;
@declare function minute(required date: any) : any;
@declare function month(required date: any) : any;
@declare function monthAsString(required month_number: any) : any;
@declare function monthShortAsString(required monthnumber: any) : any;
@declare function newLine() : any;
@declare function now() : any;
@declare function nowServer() : any;
@declare function nullValue() : any;
@declare function numberFormat(required number: any, mask: any) : any;
@declare function objectEquals(required Param1: any, required Param2: any) : any;
@declare function objectLoad(required binaryObject: any, required filepath: any) : any;
@declare function objectSave(required object: any, file: any) : any;
@declare function onApplicationEnd(required ApplicationScope: any) : any;
@declare function onApplicationStart() : any;
@declare function onError(required exception: any, required eventName: any) : any;
@declare function onMissingMethod(required missingMethodName: any, required missingMethodArguments: any) : any;
@declare function onMissingTemplate(required targetPage: any) : any;
@declare function onRequest(required targetPage: any) : any;
@declare function onRequestEnd(required targetPage: any) : any;
@declare function onRequestStart(required targetPage: any) : any;
@declare function onServerStart() : any;
@declare function onSessionEnd(required sessionScope: any, required applicationScope: any) : any;
@declare function onSessionStart() : any;
@declare function ormClearSession(datasource: any) : any;
@declare function ormCloseAllSessions(required region: any) : any;
@declare function ormCloseSession(datasource: any) : any;
@declare function ormEvictCollection(required componentName: any, required relationName: any, id: any) : any;
@declare function ormEvictEntity(required componentName: any, id: any) : any;
@declare function ormEvictQueries(cacheName: any) : any;
@declare function ormExecuteQuery(required hql: any, params: any, unique: any, queryoptions: any) : any;
@declare function ormFlush(datasource: any) : any;
@declare function ormFlushAll(required region: any) : any;
@declare function ormGetSession() : any;
@declare function ormGetSessionFactory() : any;
@declare function ormIndex() : any;
@declare function ormIndexPurge(required region: any) : any;
@declare function ormReload() : any;
@declare function ormSearch(required query_text: any, required entityName: any, required fields: any, required optionMap: any) : any;
@declare function ormSearchOffline(required query_text: any, required entityName: any, required fields_to_be_selected: any, required fields: any, optionMap: any, extra options: any) : any;
@declare function pagePoolClear() : any;
@declare function pagePoolList() : any;
@declare function paragraphFormat(required String: any) : any;
@declare function parameterExists(required parameter: any) : any;
@declare function parseDateTime(required dt_string: any, pop_conversion: any) : any;
@declare function parseNumber(required number: any, radix: any) : any;
@declare function pi() : any;
@declare function precisionEvaluate(required expressions: any) : any;
@declare function preserveSingleQuotes(required variable: any) : any;
@declare function quarter(required date: any) : any;
@declare function query() : any;
@declare function queryAddColumn(required query: any, required column_name: any, datatype: any, required array_name: any) : any;
@declare function queryAddRow(required query: any, number/row(s): any) : any;
@declare function queryAppend(required query1: any, required query2: any) : any;
@declare function queryClear() : any;
@declare function queryColumnArray(required query: any) : any;
@declare function queryColumnCount(required query: any) : any;
@declare function queryColumnData(required query: any, required columnName: any, closure: any) : any;
@declare function queryColumnExists(required query: any, required column: any) : any;
@declare function queryColumnList(required query: any, delimiter: any) : any;
@declare function queryConvertForGrid(required query: any, required page: any, required pageSize: any) : any;
@declare function queryCurrentRow(required query: any) : any;
@declare function queryDeleteColumn(required query: any, required column: any) : any;
@declare function queryDeleteRow(required query: any, row: any) : any;
@declare function queryEach(required query: any, required callback: any, parallel: any, maxThreads: any) : any;
@declare function queryEvery(required query: any, required closure: any, parallel: any, maxThreads: any) : any;
@declare function queryExecute(required sql: any, params: any, options: any) : any;
@declare function queryFilter(required query: any, required callback: any, parallel: any, maxThreads: any) : any;
@declare function queryGetCell(required query: any, required column_name: any, row_number: any) : any;
@declare function queryGetResult(required query: any) : any;
@declare function queryGetRow(required query: any, required rowNumber: any) : any;
@declare function queryKeyExists(required query: any, required key: any) : any;
@declare function queryMap(required query: any, required callback: any, parallel: any, maxThreads: any) : any;
@declare function queryNew(required columnList: any, columnTypeList: any, rowData: any) : any;
@declare function queryPrepend(required query1: any, required query2: any) : any;
@declare function queryRecordCount(required query: any) : any;
@declare function queryReduce(required query: any, required callback: any, initialValue: any) : any;
@declare function queryReverse(required query: any) : any;
@declare function queryRowData(required query: any, required rowNumber: any) : any;
@declare function querySetCell(required query: any, required column: any, required value: any, row: any) : any;
@declare function querySlice(required query: any, required offset: any, length: any) : any;
@declare function querySome(required query: any, required callback: any, parallel: any, maxThreads: any) : any;
@declare function querySort(required query: any, required sortFunction: any, direction: any) : any;
@declare function quotedValueList(required column: any, delimiter: any) : any;
@declare function rand(algorithm: any) : any;
@declare function randomize(required number: any, algorithm: any) : any;
@declare function randRange(required number1: any, required number2: any, algorithm: any) : any;
@declare function reEscape(required string: any) : any;
@declare function reFind(required reg_expression: any, required string: any, start: any, returnsubexpressions: any, scope: any) : any;
@declare function reFindNoCase(required reg_expression: any, required string: any, start: any, returnsubexpressions: any, scope: any) : any;
@declare function releaseCOMObject(required objectName: any) : any;
@declare function reMatch(required reg_expression: any, required string: any) : any;
@declare function reMatchNoCase(required reg_expression: any, required string: any) : any;
@declare function removeCachedQuery(required SQL: any, required datasource: any, params: any, region: any) : any;
@declare function removeChars(required String: any, required start: any, required count: any) : any;
@declare function render(required CFML: any, dialect: any) : any;
@declare function repeatString(required String: any, required count: any) : any;
@declare function replace(required String: any, required substring1: any, required substring2: any, scope: any) : any;
@declare function replaceList(required String: any, required list1: any, required list2: any, delimiter: any, delimiterList1: any, delimiterList2: any, includeEmptyFields: any) : any;
@declare function replaceListNoCase(required String: any, required list1: any, required list2: any, delimiter: any, delimiterList1: any, delimiterList2: any, includeEmptyFields: any) : any;
@declare function replaceNoCase(required String: any, required substring1: any, required substring2: any, scope: any) : any;
@declare function reReplace(required string: any, required regex: any, required substring: any, scope: any) : any;
@declare function reReplaceNoCase(required String: any, required reg_expression: any, required substring: any, scope: any) : any;
@declare function restDeleteApplication(required dirPath: any) : any;
@declare function restInitApplication(required dirPath: any, required serviceMapping: any, default: any, required password: any) : any;
@declare function restSetResponse(required response: any) : any;
@declare function reverse(required String: any) : any;
@declare function right(required String: any, required count: any) : any;
@declare function rJustify(required String: any, required length: any) : any;
@declare function round(required number: any) : any;
@declare function rTrim(required String: any) : any;
@declare function runAsync(callback: any, timeout: any) : any;
@declare function second(required date: any) : any;
@declare function sendGatewayMessage(required gatewayID: any, required data: any) : any;
@declare function serialize(required objToBeSerialized: any, required type: any, required useCustomSerializer: any) : any;
@declare function serializeJSON(required var: any, serializeQueryByColumns: any, useSecureJSONPrefix: any, useCustomSerializer: any) : any;
@declare function serializeXML(required objToBeSerialized: any, required useCustomSerializer: any) : any;
@declare function sessionGetMetadata(required region: any) : any;
@declare function sessionInvalidate() : any;
@declare function sessionRotate() : any;
@declare function sessionstartTime() : any;
@declare function setEncoding(required scope_name: any, required charset: any) : any;
@declare function setLocale(required new_locale: any) : any;
@declare function setProfileString(required inipath: any, required section: any, required entry: any, required value: any) : any;
@declare function setTimezone(required timezone: any) : any;
@declare function setVariable(required name: any, required value: any) : any;
@declare function sgn(required number: any) : any;
@declare function sin(required number: any) : any;
@declare function sizeOf(required obj: any, complex: any) : any;
@declare function sleep(required duration: any) : any;
@declare function soundEx(required str: any) : any;
@declare function spanExcluding(required String: any, required set: any) : any;
@declare function spanIncluding(required String: any, required set: any) : any;
@declare function spreadsheetAddAutoFilter(required spreadsheetObj: any, required autofilter: any) : any;
@declare function spreadsheetAddColumn(required spreadsheetObj: any, required data: any, required startrow: any, required startcolumn: any, required insert: any, insert: any) : any;
@declare function spreadsheetAddFreezePane(required spreadsheetObj: any, required freezeColumn: any, required freezeRow: any, hideColumn: any, hideRow: any) : any;
@declare function spreadsheetAddimage(required spreadsheetObj: any, required imagefilepath: any, required anchor: any) : any;
@declare function spreadsheetAddInfo(required spreadsheetObj: any, required info: any) : any;
@declare function spreadsheetAddPagebreaks(required SpreadsheetObj: any, required rowbreaks: any, required colbreaks: any) : any;
@declare function spreadsheetAddRow(required spreadsheetObj: any, required data: any, row: any, column: any, insert: any, datatype: any) : any;
@declare function spreadsheetAddRows(required spreadsheetObj: any, required data: any, row: any, column: any, insert: any, datatype: any, includeColumnNames: any) : any;
@declare function spreadsheetAddSplitPane(required spreadsheetObj: any, required x: any, required y: any, required splitColumn: any, required splitRow: any, position: any) : any;
@declare function spreadsheetCreateSheet(required spreadsheetObj: any, required name: any) : any;
@declare function spreadsheetDeleteColumn(required spreadsheetObj: any, required column: any) : any;
@declare function spreadsheetDeleteColumns(required spreadsheetObj: any, required range: any) : any;
@declare function spreadsheetDeleteRow(required spreadsheetObj: any, required row: any) : any;
@declare function spreadsheetDeleteRows(required spreadsheetObj: any, required range: any) : any;
@declare function spreadsheetFormatCell(required spreadsheetObj: any, required format: any, required row: any, required column: any) : any;
@declare function spreadsheetFormatCellRange(required spreadsheetObj: any, required format: any, required startRow: any, required startColumn: any, required endRow: any, required endColumn: any) : any;
@declare function spreadsheetFormatColumn(required spreadsheetObj: any, required format: any, required column: any) : any;
@declare function spreadsheetFormatColumns(required spreadsheetObj: any, required format: any, required columns: any) : any;
@declare function spreadsheetFormatRow(required spreadsheetObj: any, required format: any, required row: any) : any;
@declare function spreadsheetFormatRows(required spreadsheetObj: any, required format: any, required rows: any) : any;
@declare function spreadsheetGetCellComment(required author: any, column: any, comment: any, row: any) : any;
@declare function spreadsheetGetCellFormula(required spreadsheetObj: any, required row: any, required column: any) : any;
@declare function spreadsheetGetCellValue(required spreadsheetObj: any, required row: any, required column: any) : any;
@declare function spreadsheetGetColumnCount(required spreadsheetObj: any, sheet: any) : any;
@declare function spreadsheetInfo(required spreadsheetObj: any) : any;
@declare function spreadsheetMergeCells(required spreadsheetObj: any, required startrow: any, required endrow: any, required startcolumn: any, required endcolumn: any) : any;
@declare function spreadsheetNew(sheetname: any, xmlFormat: any) : any;
@declare function spreadsheetRead(required fileName: any, required spreadsheetObj: any) : any;
@declare function spreadsheetReadBinary(required spreadsheetObj: any) : any;
@declare function spreadsheetRemoveSheet(required spreadsheetObj: any, required sheetname: any) : any;
@declare function spreadsheetSetActiveSheet(required spreadsheetObj: any, name: any) : any;
@declare function spreadsheetSetActiveSheetNumber(required spreadsheetObj: any, number: any) : any;
@declare function spreadsheetSetCellComment(required spreadsheetObj: any, required comment: any, required row: any, required column: any) : any;
@declare function spreadsheetSetCellFormula(required spreadsheetObj: any, required formula: any, required row: any, required column: any) : any;
@declare function spreadsheetSetCellValue(required spreadsheetObj: any, required value: any, required row: any, required column: any) : any;
@declare function spreadsheetSetColumnWidth(required spreadsheetObj: any, required columnNumber: any, required width: any) : any;
@declare function spreadsheetSetFooter(required spreadsheetObj: any, required leftFooter: any, required centerFooter: any, required rightFooter: any) : any;
@declare function spreadsheetSetHeader(required spreadsheetObj: any, required leftHeader: any, required centerHeader: any, required rightHeader: any) : any;
@declare function spreadsheetSetRowHeight(required spreadsheetObj: any, required rowNumber: any, required height: any) : any;
@declare function spreadsheetShiftColumns(required spreadsheetObj: any, required start: any, end: any, start: any) : any;
@declare function spreadsheetShiftRows(required spreadsheetObj: any, required start: any, required end: any, rows: any) : any;
@declare function spreadsheetwrite(required spreadsheetObj: any, required fileName: any, password: any, overwrite: any) : any;
@declare function sqr(required number: any) : any;
@declare function sslCertificateInstall(required host: any, port: any) : any;
@declare function sslCertificateList(required host: any, port: any) : any;
@declare function storeAddACL(required url: any, required ACLObject: any) : any;
@declare function storeGetACL(required ulr: any, required ACLObject: any) : any;
@declare function storeGetMetadata(required url: any) : any;
@declare function storeSetACL(required url: any, required ACLObject: any) : any;
@declare function storeSetMetadata(required url: any, required region: any) : any;
@declare function stringLen(required string: any) : any;
@declare function stripCR(required String: any) : any;
@declare function structAppend(required destStruct: any, required sourceStruct: any, overwriteFlag: any) : any;
@declare function structClear(required structure: any) : any;
@declare function structCopy(required structure: any) : any;
@declare function structCount(required structure: any) : any;
@declare function structDelete(required structure: any, required key: any, indicateNotExisting: any) : any;
@declare function structEach(required struct: any, required callback: any, parallel: any, maxThreads: any) : any;
@declare function structEquals(required struct1: any, required struct2: any) : any;
@declare function structEvery(required struct: any, required closure: any, parallel: any, maxThreads: any) : any;
@declare function structFilter(required struct: any, required callback: any, parallel: any, maxThreads: any) : any;
@declare function structFind(required structure: any, required key: any, defaultValue: any) : any;
@declare function structFindKey(required top: any, required value: any, required scope: any) : any;
@declare function structFindValue(required top: any, required value: any, scope: any) : any;
@declare function structGet(required path: any) : any;
@declare function structGetMetadata(required struct: any) : any;
@declare function structInsert(required structure: any, required key: any, required value: any, allowoverwrite: any) : any;
@declare function structIsEmpty(required structure: any) : any;
@declare function structIsOrdered(required struct: any) : any;
@declare function structKeyArray(required structure: any) : any;
@declare function structKeyExists(required structure: any, required key: any) : any;
@declare function structKeyList(required structure: any, delimiter: any) : any;
@declare function structKeyTranslate(required structure: any, deepTranslation: any, leaveOriginalKey: any) : any;
@declare function structListNew(required maxsize: any) : any;
@declare function structMap(required struct: any, required callback: any, parallel: any, maxThreads: any) : any;
@declare function structNew(structType: any) : any;
@declare function structReduce(required struct: any, required callback: any, required initialVal: any) : any;
@declare function structSetMetadata(required inputStruct: any, required metaStruct: any) : any;
@declare function structSome(required struct: any, required callback: any, parallel: any, maxThreads: any) : any;
@declare function structSort(required base: any, sorttype: any, sortorder: any, pathtosubelement: any, localeSensitive: any, callback: any) : any;
@declare function structToSorted(required structure: any, callback: any, sorttype: any, sortorder: any, localeSensitive: any) : any;
@declare function structUpdate(required structure: any, required key: any, required value: any) : any;
@declare function structValueArray(required structure: any) : any;
@declare function systemCacheClear(cacheName: any) : any;
@declare function systemOutput(required obj: any, addNewLine: any, doErrorStream: any) : any;
@declare function tan(required number: any) : any;
@declare function threadJoin(threadName: any, timeout: any) : any;
@declare function threadTerminate(required threadname: any) : any;
@declare function throw(message: any, type: any, detail: any, errorcode: any, extendedinfo: any, object: any) : any;
@declare function timeFormat(required time: any, mask: any) : any;
@declare function toBase64(required string_or_object: any, encoding: any) : any;
@declare function toBinary(required base64_or_object: any) : any;
@declare function toNumeric(required value: any, radix: any) : any;
@declare function toScript(required cfvar: any, required javascriptvar: any, outputformat: any, asformat: any) : any;
@declare function toString(required any_value: any, encoding: any) : any;
@declare function trace(var: any, text: any, type: any, category: any, inline: any, abort: any) : any;
@declare function transactionCommit() : any;
@declare function transactionRollback(savepoint: any) : any;
@declare function transactionSetSavepoint(required savepoint: any) : any;
@declare function trim(required String: any) : any;
@declare function trueFalseFormat(required value: any) : any;
@declare function uCase(required String: any) : any;
@declare function ucFirst(required string: any, doAll: any, doLowerIfAllUppercase: any) : any;
@declare function unserializeJava(required string: any) : any;
@declare function urlDecode(required urlencodedstring: any, charset: any) : any;
@declare function urlEncode(required string: any, charset: any, force: any) : any;
@declare function urlEncodedFormat(required String: any, charset: any) : any;
@declare function urlSessionFormat(required requesturl: any) : any;
@declare function val(required String: any) : any;
@declare function valueArray(required query: any, required column: any) : any;
@declare function valueList(required column: any, delimiter: any) : any;
@declare function verifyClient() : any;
@declare function webserviceNew(required url: any, arguments: any) : any;
@declare function week(required date: any) : any;
@declare function wrap(required String: any, required limit: any, strip: any) : any;
@declare function writeBody() : any;
@declare function writeDump(required var: any, output: any, format: any, abort: any, label: any, metainfo: any, top: any, show: any, hide: any, keys: any, expand: any, showUDfs: any) : any;
@declare function writeLog(required text: any, type: any, application: any, file: any, log: any) : any;
@declare function writeOutput(required string: any, encodeFor: any) : any;
@declare function wsGetAllChannels(channelName: any) : any;
@declare function wsGetSubscribers(required channel: any) : any;
@declare function wsPublish(required channel: any, required message: any, filterCriteria: any) : any;
@declare function wsSendMessage(required message: any) : any;
@declare function xmlChildPos(required elem: any, required childname: any, required n: any) : any;
@declare function xmlElemNew(required xmlobj: any, namespace: any, required childname: any) : any;
@declare function xmlFormat(required String: any, escapeChars: any) : any;
@declare function xmlGetNodeType(required xmlNode: any) : any;
@declare function xmlNew(casesensitive: any) : any;
@declare function xmlParse(required xmlString: any, caseSensitive: any, validator: any) : any;
@declare function xmlSearch(required xmlNode: any, required xpath: any, params: any) : any;
@declare function xmlTransform(required xml: any, required xsl: any, parameters: any) : any;
@declare function xmlValidate(required xmlDoc: any, validator: any) : any;
@declare function year(required date: any) : any;
@declare function yesNoFormat(required value: any) : any;

@declare global cgi = {
    auth_password:        string,
    auth_type:            string,
    auth_user:            string,
    cert_cookie:          string,
    cert_flags:           string,
    cert_issuer:          string,
    cert_keysize:         string,
    cert_secretkeysize:   string,
    cert_serialnumber:    string,
    cert_server_issuer:   string,
    cert_server_subject:  string,
    cert_subject:         string,
    cf_template_path:     string,
    content_length:       string,
    content_type:         string,
    context_path:         string,
    gateway_interface:    string,
    https:                string,
    https_keysize:        string,
    https_secretkeysize:  string,
    https_server_issuer:  string,
    https_server_subject: string,
    http_accept:          string,
    http_accept_encoding: string,
    http_accept_language: string,
    http_connection:      string,
    http_cookie:          string,
    http_host:            string,
    http_referer:         string,
    http_user_agent:      string,
    query_string:         string,
    remote_addr:          string,
    remote_host:          string,
    remote_user:          string,
    request_method:       string,
    script_name:          string,
    server_name:          string,
    server_port:          string,
    server_port_secure:   string,
    server_protocol:      string,
    server_software:      string,
}
--->